\C{config} 配置 PuTTY

本章介绍 PuTTY 中的所有配置选项。 \i{configuration options}

PuTTY 使用在您开始会话之前出现的控制面板进行配置。
通过从窗口菜单中选择\q{更改设置}，
也可以在会话中间更改某些选项。

\H{config-session} 会话面板

会话配置面板包含您需要指定以便完
全打开会话的基本选项，
还允许您保存设置以供以后重新加载。

\S{config-hostname}\i{主机名}

会话面板上的顶部框，标有\q{指定要连接的目的地址}，
包含在 PuTTY完全可以打开会话之
前需要填写的详细信息。

\b \q{主机名} 框是您输入要连接的
服务器的名称或 \i{IP地址}的地方。

\b \q{连接类型} 控件可让您选择要建立
的连接类型：\i{SSH}
网络连接、与\i{serial line}的
连接或各种其他类型的网络连接。

\lcont{

\b 查看 \k{which-one} 有关网络
远程登录协议 SSH、Telnet、Rlogin
和 SUPDUP 之间差异的摘要。

\b 查看 \k{using-serial} 有关使用串口的信息。

\b 查看 \k{using-rawprot} 有关 \q{raw}
连接的解释。

\b 查看 \k{using-telnet} 有关 Telnet 的一些信息。

\b 查看 \k{using-rlogin} 有关使用 Rlogin 的信息。

\b 查看 \k{using-supdup} 有关使用 SUPDUP 的信息。

\b \q{连接类型}中的\q{Bare ssh-connection}
选项适用于不涉及网络连接的专业用途。
请参阅 \k{config-psusan} 有关它的一些信息。

}

\b \q{端口}框可让您指定服务器上要连接的\i{端口号}。
如果您选择 Telnet、Rlogin、SUPDUP 或 SSH，
此框将自动填写为通常的值，
您只需在服务器异常时进行更改。
如果您选择 Raw 模式，
您几乎肯定需要自己填写\q{端口}框。

如果您从\q{连接类型}单选按钮中选择\q{串口}，
则\q{主机名} 和\q{端口}框将被\q{串行线}和\q{波特率}替换；
有关这些的更多详细信息，请参阅 \k{config-serial} 。

\S{config-saving} \ii{加载和存储保存的会话}

会话配置面板的下一部分允许您保存首选的 PuTTY 选项，
以便下次启动 PuTTY 时它们会自动出现。
它还允许您创建保存的会话，其中包含全套
配置选项以及主机名和协议。
保存的会话包含 PuTTY 启动所需会话
所需的所有信息。

\b 要保存默认设置：首先按照您希望的方式设
置设置。 然后返回会话面板。
在保存的会话列表中选择\q{\i{默认设置}}
条目。 然后按\q{保存}按钮，只需单击一下，即可。

如果您要存储特定主机的连接方式的详细信息，
则应创建一个已保存的会话，
该会话将与默认设置分开。

\b 保存会话：首先通过配置框的其余部
分设置您想要的所有选项。
然后返回会话面板。 在\q{保存会话}输
入框中输入已保存会话的名称。 （服务器名称通常是保存会话名称
的不错选择。）然后按\q{保存}按钮。
 您保存的会话名称现在应该出现在列表框中。

\lcont{
您还可以在会话中通过\q{更改设置}对话
框保存设置。 自会话开始以来更改的设
置将与其当前值一起保存； 以及通过对话框更改的设置，
包括窗口大小的更改、
服务器发送的窗口标题更改等。
}

\b 重新加载已保存的会话：单击以在列表框中
选择会话名称，然后按\q{加载}按钮。
您保存的设置应全部显示在配置面板中。

\b 要修改已保存的会话：首先如上所述加载它。
然后进行您想要的更改。 返回会话面板，
然后按\q{保存}按钮。
新设置将保存在旧设置之上。

\lcont{
要以不同的名称保存新设置，
您可以在\q{保存会话}框中输入新名称，
或单击以在列表框中选择一个会话名称以覆盖该会话。
要保存\q{默认设置}，您必须在保存前单击名称。
}

\b 立即开始保存的会话：
双击列表框中的会话名称。

\b 要删除已保存的会话：单击以在列表框
中选择会话名称，然后按\q{删除}按钮。

每个保存的会话都独立于默认设置配置。
如果您更改首选项并更新默认设置，
您还必须单独更新每个保存的会话。

保存的会话存储在\i{注册表}中的位置：

\c HKEY_CURRENT_USER\Software\SimonTatham\PuTTY\Sessions

如果您需要将它们存储在文件中，
您可以尝试中描述的方法，请参考 \k{config-file}。

\S{config-closeonexit} \q{退出时\ii{关闭窗口}}

最后在会话面板中，有一个标记为\q{退出时关闭窗口}
的选项。 这控制 PuTTY \i{终端窗口}是否在其内部的
会话终止后立即消失。 如果您可能希望在
会话终止后将文本复制并粘贴到会话之外，
或者重新启动会话，
则应安排关闭此选项。

\q{退出时关闭窗口}具有三个设置。
\q{始终}是指在退出时始终关闭窗口； “\q{从不}表示退出时从不关闭
（始终保持窗口打开，但\I{inactive window}不活动）。
第三个设置，也是默认设置，是\q{仅正常退出}。
在这种模式下，正常终止的会话将导致其窗口关闭，
但由于网络故障或来自服务器的混乱消息而意外
中止的会话将使窗口保持打开状态。

\H{config-logging} 日志面板

日志配置面板允许您保存 PuTTY 会话的\i{日志文件}，
以供调试、分析或将来参考。

主要选项是一个单选按钮集，
它指定 PuTTY 是否会记录任何内容。 选项包括：

\b \q{暂无日志}——这是默认选项;
在这种模式下，PuTTY 根本不会创建日志文件。

\b \q{可打印的输出}——在此模式下，
将创建并写入日志文件，但只会将可打印的文
本保存到其中。 将省略通常与可打印文本一
起在交互式会话中发送的各种终端控制代码。
如果您想在文本编辑器中阅读日志文
件并希望能够理解它，这可能是一种有用的模式。

\b \q{所有会话输出}——在这种模式下，服务器
发送到您的终端会话的\e{所有}内容都会被记录下来。
因此，如果您在文本编辑器中查看日志文件，
您可能会发现它充满了奇怪的控制字符。
如果您在使用 PuTTY 的终端处理时遇到问题，
这是一种特别
有用的模式：您可以记录到终端的所有内容，
以便其他人稍后可以慢动作重播会话并查看出现了什么问题。

\b \I{SSH packet log}\q{SSH 数据包}——在此
模式下（仅由 SSH 连接使用），通过加密连
接发送的 SSH 消息数据包将写入日志文件
（以及\i{事件日志}条目）。 您可能需要它来调试网络级问题，或者更有可能
将其作为错误报告的一部分发送给 PuTTY 作者。
 \e{请注意}，如果您使用密码登录，密码可能会
 出现在日志文件中；请参阅 \k{config-logssh}。
 在将日志文件发送给其他任何人之前，
 这些选项可能有助于从日志文件中删除敏感材料。

\b \q{SSH数据包和raw数据}——在这种模式下，
除了解密的数据包（如前一种模式），
\e{raw}（加密、压缩等）数据包\e{也}被记录下来。
这可能有助于诊断传输过程中的差错。
（当然，与以前的模式相同的警告也适用。）

请注意，非 SSH 日志记录选项（\q{可打印输出}
和\q{所有会话输出}）仅适用于 PuTTY；
 在没有终端仿真的程序（例如 Plink）中，即使通过保存
 的设置启用，它们也不会起作用。

\S{config-logfilename} \q{日志文件名}

在此编辑框中，您输入要将会话记录到的
文件的名称。 \q{浏览} 按钮可让您查看文
件系统以找到放置文件的正确位置；
或者，如果您已经知道确切的去向，
您只需在编辑框中输入路径名即可。

这个输入框有一些特殊功能。
如果在文件名框中使用 \c{&} 字符，
PuTTY 将在实际打开的文件名中插入当
前会话的详细信息。 它将做的精确替换是：

\b \c{&Y} 将被当前年份替换为四位数。

\b \c{&M} 将被当前月份替换为两位数。

\b \c{&D} 将被当月的当前日
期替换为两位数。

\b \c{&T} 将被当前时间替换为
六位数字 (HHMMSS)，没有标点符号。

\b \c{&H} 将替换为您要连接的主机名。
(或串口，用于串行连接)。

\b \c{&P} 将替换为您在目标主机
上连接的端口号。

(这些都是不区分大小写的。)

例如，如果您输入主
\c{c:\\puttylogs\\log-&h-&y&m&d-&t.dat},
你最终会得到的文件看起来像

\c log-server1.example.com-20010528-110859.dat
\c log-unixbox.somewhere.org-20010611-221001.dat

\S{config-logfileexists} \q{如果日志文件已经存在怎么办}

此控件允许您指定 PuTTY 在尝试开
始写入日志文件并且发现该文件已存
在时应该执行的操作。 您可能希望自动
销毁现有的日志文件并启动一个具有相
同名称的新文件。 或者，您可能想要打开现
有日志文件并将数据添加到它的\e{末尾}。 最后（默认选项），
您可能不希望有任何自动行为，
而是在每次出现问题时询问用户。

\S{config-logflush} \I{log file, flushing}\q{频繁刷新日志文件}

此选项允许您控制将记录的数据刷新到磁盘的频率。
默认情况下，PuTTY 会在显示数据后立即刷
新数据，因此如果您在会话仍处于打开状态
时查看日志文件，它将是最新的； 如果客户端系统崩溃，
则数据被保留的可能性更大。

但是，这可能会导致性能损失。
如果 PuTTY 在启用日志记录的情况下
运行缓慢，您可以尝试取消选中此选项。 请注意，
日志文件可能并不总是最新的
（尽管它当然会在关闭时被刷新，例如在会话结束时）。

\S{config-logheader} \I{log file, header}\q{包括标题}

此选项允许您选择是否在打开日志
文件时包含带有日期和时间的标题行。
如果日志文件被用作其他不需要标题
行的程序的实时输入，禁用此功能可能很有用。

\S{config-logssh} 特定的\i{SSH数据包日志}选项

这些选项仅在记录 SSH 数据包数据时适用。

以下选项允许将未加密数据包的特别敏
感部分自动排除在日志文件之外。
它们只是为了阻止随意的记录数据；
攻击者甚至可以从这些混淆的日志
中收集到很多有用的信息（例如，密码长度）。

\S2{config-logssh-omitpw} \q{省略已知密码字段}

选中后，解密的密码字段将从传输数据包的
日志中删除。（这包括任何用户对质询-响
应身份验证方法的响应，例如\q{键盘交互}。）
如果使用 X11 转发，
则不包括 X11 身份验证数据。

请注意，这只会忽略 PuTTY \e{知道}是密码的数据。
但是，例如，如果您在 PuTTY 会话中启动
另一个登录会话，则使用的任何密码都会
以明文形式显示在数据包日志中。
下一个选项可能用于防止这种情况。

默认情况下启用此选项。

\S2{config-logssh-omitdata} \q{省略会话数据}

选中后，所有解密的\q{会话数据}都将被忽略；
这被定义为终端会话和转发通道（TCP、X11
和身份验证代理）中的数据。 这通常会
大大减少生成的日志文件的大小。

默认情况下禁用此选项。

\H{config-terminal} 终端面板

终端配置面板允许您控制
PuTTY \i{终端仿真}的行为。

\S{config-autowrap} \q{开启自动换行模式}

\ii{Auto wrap mode} 自动换行模式控制在 PuTTY
窗口中打印的文本到达窗口右侧边缘时发生的情况。

启用自动换行模式后，如果一长行文本到达右
侧边缘，它将换行到下一行，因此您仍然
可以看到所有文本。 关闭自动换行模式后，光标
将停留在屏幕的右侧边缘，并且该行中的所
有字符将相互重叠打印。

如果您正在运行全屏应用程序，
并且您偶尔会发现屏幕似乎不应该向上滚动，
您可以尝试关闭此选项。

自动换行模式可以通过服务器发送
的\i{控制序列}打开和关闭。
此配置选项控制\e{默认}状态，当您
重置终端时将恢复(请参阅 \k{reset-terminal})。
但是，如果您在会话中使用\q{更改设置}修改此选项，
它将立即生效。

\S{config-decom} \q{开启DEC原始模式}

\i{DEC 原始模式} 是一个次要选项，
它控制 PuTTY 如何解释服务器发送的光标位置\i{控制序列}。

服务器可以发送限制显示\i{滚动区域}的控制序列。
例如，在编辑器中，服务器可能会在屏幕顶部保留一行，
在屏幕底部保留一行，
并可能发送一个控制序列，
使滚动操作仅影响剩余的行。

启用 DEC 原始模式后，\i{光标坐标}
从滚动区域的顶部开始计算。
关闭它后，无论滚动区域如何，
光标坐标都从整个屏幕的顶部开始计算。

您不太可能需要更改此选项，
但如果您发现全屏应用程序在屏幕
的错误部分显示文本，您可以尝
试打开 DEC 原始模式以查看是否有帮助。

可以通过服务器发送的控制序列打开和关
闭 DEC 原始模式。此配置选项控制\e{默认状态}，
当您重置终端时将恢复 (请参阅 \k{reset-terminal})。
但是，如果您在会话中使
用\q{更改设置}修改此选项，
它将立即生效。

\S{config-crlf} \q{每个LF字符后面增加CR字符}

大多数服务器发送两个控制字符 \i{CR} 和 \i{LF}
来开始屏幕的\i{新行}。 CR 字符使光标返回到屏
幕的左侧。 LF 字符使光标向下移动一行
（并可能使屏幕滚动）。

有些服务器只发送LF，并期望终端自动将光标移到左边。
如果您遇到执行此操作的服务器，
您将在屏幕上看到\I{stair-stepping}阶梯式的效果，
如下所示：

\c First line of text
\c                   Second line
\c                              Third line

如果您遇到这种情况，请尝试启用\q{每个LF字符后面增加CR字符}选项，
事情可能会恢复正常：

\c First line of text
\c Second line
\c Third line

\S{config-lfcr} \q{每个CR字符后面增加LF字符}

大多数服务器发送两个控制字符 \i{CR} 和 \i{LF}
来开始屏幕的\i{新行}。
CR 字符使光标返回到屏幕的左侧。
LF 字符使光标向下移动一行（并可能使屏幕滚动）。

有些服务器只发送 CR，
所以新写入的行被下一行覆盖。
此选项会导致换行，以便显示所有行。

\S{config-erase} \q{使用\i{背景颜色}清屏}

当服务器发送\q{\i{清屏}} 命令时，
并非所有终端都同意将屏幕变成什么颜色。
一些终端认为应该始终将屏幕清除为\e{默认}背
景颜色。 其他人认为屏幕应该被清除
为服务器选择的任何背景颜色。

存在期望这两种行为的应用程序。
因此，PuTTY 可以配置为执行任一操作。

禁用此选项后，屏幕清除始终以默认背景
颜色完成。 启用此选项后，
\e{现在} 将以当前背景颜色完成。

背景颜色擦除可以通过服务器发送的\i{控制序列}
打开和关闭。
此配置选项控制\e{默认}状态，
当您重置终端时将恢复(请参阅 \k{reset-terminal})。但是，
如果您在会话中使用\q{更改设置}修改此选项，
它将立即生效。

\S{config-blink} \q{启用\i{闪烁文本}}

服务器可以要求 PuTTY 显示闪烁的文本。
 这非常分散注意力，
 因此 PuTTY 允许您完全关闭闪烁文本。

当闪烁文本被禁用并且服务器尝试使某些
文本闪烁时，PuTTY 将改为以\I{background
colour, bright}粗体背景颜色显示文本。

闪烁文本可以通过服务器发送
的\i{控制序列}打开和关闭。
此配置选项控制\e{默认}状态，
当您重置终端时将恢复(请参阅 \k{reset-terminal})。
但是，如果您在会话中使用\q{更改设置}修改此选项，
它将立即生效。

\S{config-answerback} \q{\ii{回答} ^E}

如果服务器向 PuTTY 发送 ^E \i{查询字符}，
此选项控制 PuTTY 将发送回服务器的内容。
通常它只发送字符串\q{PuTTY}。

如果您不小心将二进制文件的内容写入终端，
您可能会发现它包含多个 ^E 字符，因此您
的下一个命令行可能会读取 \q{PuTTYPuTTYPuTTY...}
就好像你输入了 在键盘上多次回复字符串。
如果您将应答字符串设置为空，
则此问题应该会消失，
但这样做可能会导致其他问题。

请注意，这\e{不是} PuTTY 的功能，
服务器通常会使用它来确定您的终端类型。
该功能是连接面板中的\q{\ii{终端类型}字符串}，
详细内容请参阅 \k{config-termtype}。

您可以使用 \c{^C}表示法在应答字符串中包含控制字符。
（使用 \c{^~} 获得 \c{^} 符号。）

\S{config-localecho} \q{\ii{本地回显}}

禁用本地回显后，您在 PuTTY 窗口中键入的字符不会
被 \e{PuTTY} 在窗口中回显。 它们只是被发送到服务器。
（\e{服务器}可能会选择将它们\I{remote echo}回显给您；
这无法通过 PuTTY 控制面板进行控制。）

某些类型的会话需要本地回显，而许多不需要。
在其默认模式下，PuTTY 将自动尝试推断本地回
显是否适合您正在工作的会话。
如果您发现它做出了错误的决定，
您可以使用此配置选项覆盖其选择：
您可以强制 本地回波被打开，
或者强制关闭，而不是依靠自动检测。

\S{config-localedit} \q{\ii{本地行编辑}}

通常，您在 PuTTY 窗口中键入的每个字
符都会在您键入的那一刻立即发送到服务器。

如果您启用本地行编辑，这会改变。
PuTTY 将允许您在本地一次编辑一整行，
并且该行仅在您按 Return 时才会发送到服务器。
如果出现错误，可以在按 Return 之前使
用 Backspace 键更正，服务器将永远不会看到错误。

由于无法在本地编辑行而无法看到它，
因此本地行编辑主要与\i{本地回显}结合使
用 (\k{config-localecho})。 这使其非常
适合在raw模式\#{FIXME}或连接到 \i{MUD} 或\i{talker}时使用。
（虽然一些更高级的 MUD 偶尔会打开本地行编辑并关闭本地回显，
以便接受用户的密码。）

某些类型的会话需要本地行编辑，
而许多不需要。 在其默认模式下，
PuTTY 将自动尝试推断本地行编辑是否适合
您正在工作的会话。如果您发现它做出了错误的
决定，您可以使用此配置选项来覆盖它的选择：
您可以 强制打开本地行编辑，
或者强制关闭，而不是依靠自动检测。

\S{config-printing} \ii{远程打印}

许多兼容 VT100 的终端支持在远
程服务器的控制下进行打印（有时称为\q{直通打印}）。
PuTTY 也支持此功能，但默认关闭。

要启用远程控制打印，请从\q{将 ANSI 打印机输出发送
到的打印机}下拉列表框中选择打印机。
这应该允许您从已在计算机上安装驱动程
序的所有打印机中进行选择。
或者，您可以键入联网打印机的网络名称
（例如，\c{\\\\printserver\\printer1}），
即使您尚未在自己的机器上安装它的驱动程序。

当远程服务器尝试打印某些数据时，
PuTTY 会将这些\e{raw}原始发送到打印机 - 无需对
其进行翻译、尝试格式化或对其执行任何其他操作。
您可以确保您的远程服务器知道
它正在与哪种类型的打印机通信。

由于 PuTTY 将数据原始发送到打印机，
因此它无法提供纵向与横向、
打印质量或纸盒选择等选项。
所有这些事情都将由您的 PC 打印机驱动程序（PuTTY 绕过）完成；如果您需要完成它们，
您将必须找到一种方法来配置您的远程服务器来完成它们。

要再次禁用远程打印，请从打印机选择列表
中选择\q{无（禁用打印）}。
这是默认状态。

\H{config-keyboard} 键盘面板

\i{键盘面板}配置允许您控制 PuTTY 中键盘的行为。
许多这些设置的正确状态取决于 PuTTY 连接到的服
务器所期望的状态。 对于 \i{Unix}服务器，这可
能取决于它使用的 \i\c{termcap} 或 \i\c{terminfo}
条目，而这又可能由 连接面板中的\q{\ii{终端
类型}字符串}设置控制；详细内容参考 \k{config-termtype}。
如果此处的设置似乎都没有帮助，
那么\k{faq-keyboard}描述的问题可能对你有帮助。

\S{config-backspace} 更改\ii{退格键}的操作

一些终端认为 Backspace 键应该向服务器发送
与 \i{Control-H}（ASCII 代码 8）相同的内容。
其他终端认为 Backspace 键应该发送 ASCII
码 127（通常称为 \i{Control-?}），
以便与 Control-H 区分开来。 此选项允许您
选择当您按 Backspace 时 PuTTY 生成的代码。

如果您通过 SSH 连接，默认情况下 PuTTY 会
告诉服务器此选项的值(请参阅 \k{config-ttymodes})，
因此，您可能会发现 Backspace 键无论哪种方式都是正确的。 同样，
如果您要连接到 \i{Unix} 系统，您可能会发现
Unix \i\c{stty} 命令允许您配置服务器期望看到的
内容，因此您可能不需要更改 PuTTY 生成的内容。
在其他系统上，服务器的期望可能是固定的，
您可能别无选择，只能配置 PuTTY。

如果您确实有选择，我们建议配置 PuTTY
以生成 Control-? 并配置服务器以期望它，
因为这允许诸如 \c{emacs}之类的应用
程序使用 Control-H 寻求帮助。

（键入 \i{Shift-Backspace} 将
导致 PuTTY 发送此处未配置为默认值的任何代码。）

\S{config-homeend} 改变\i{Home和End键}的动作

Unix 终端模拟器 \i\c{rxvt} 与
终端可能不同，Home 和 End 键应
该将哪些字符序列发送到服务器。

\i\c{xterm} 和其他终端发送 \c{ESC [1~} 为 Home 键，
\c{ESC [4~} 为 End 键。 \c{rxvt} 发送 \c{ESC [H} 用于 Home 键，
\c{ESC [Ow} 用于 End 键。

如果您发现 Home 和 End 键不起作用的应用程序，
您可以尝试切换此选项以查看是否有帮助。

\S{config-funkeys} 更改\i{功能键}
和\i{数字键}的动作

此选项影响功能键（F1 到 F12）和
顶行的数字小键盘。

\b 在 默认 模式下，标记为 \c{ESC [n~}，
功能键生成 \c{ESC [11~}、\c{ESC [12~}
等序列。 这符合 Digital 终端的一般行为。

\b 在 Linux 模式下，F6 到 F12 的行为与默认模
式相同，但 F1 到 F5 生成 \c{ESC [[A} 到 \c{ESC [[E}。
这模仿了 \i{Linux 虚拟控制台}。

\b 在 \I{xterm}Xterm R6 模式下，
F5 到 F12 的行为类似于默认模式，
但 F1 到 F4 生成 \c{ESC OP} 到 \c{ESC OS}，
这是由 Digital 终端上的\e{键盘}顶行产生的序列。

\b 在 \i{VT400} 模式下，所有功能键的行为与默认模
式相同，但数字键盘的实际顶行会生成 \c{ESC
OP} 到 \c{ESC OS}。

\b 在 \i{VT100+} 模式下，功能键
生成 \c{ESC OP} 到 \c{ESC O[}

\b 在 \i{SCO} 模式下，功能键 F1 到 F12 生
成 \c{ESC [M} 到 \c{ESC [X}。 与 shift 一起，
它们生成 \c{ESC [Y} 到 \c{ESC [j}。 通过控制，
它们生成 \c{ESC [k} 到 \c{ESC [v}，并且通
过移位和控制一起生成 \c{ESC [w} 到 \c{ESC [\{}。

\b 在 \I{xterm}Xterm 216 模式下，
未移位的功能键的行为与 Xterm R6 模式相同。
但是将功能键与 Shift 或 Alt 或 Ctrl 一起按下会生成一个不同的序列，其中包含一个额外的数字
参数，其形式为（1 表示 Shift）+（2 表示 Alt）+
（4 表示 Ctrl）+1。对于 F1-F4， 像 ESC OP 这样的
基本序列变成 \cw{ESC [1;}\e{bitmap}\cw{P} 和类似的；
对于 F5 及以上，\cw{ESC[}\e{index}\cw{~}
变为 \cw{ESC[}\e{index}\cw{;}\e{bitmap}\cw{~}。

如果你不知道这意味着什么，
你可能不需要摆弄它。

\S{config-sharrow} 改变\i{方向键}的动作

如果您在按住任何修改键 Shift、Ctrl 或 Alt 的同时按下箭头键，
此选项会影响方向键。

\b 在默认模式下，标记为 \c{Ctrl切换应用程序模式}，
Ctrl 键在默认箭头键序列之间切换，
如 \c{ESC [A} 和 \c{ESC [B}，
以及 Digital 终端在\q{应用程序光标键}
模式下生成的序列，即 \c{ESC O A} 等 在。 Shift 和 Alt 无效。

\b 在\q{xterm 位图风格}模式下，
Shift、Ctrl 和 Alt 都会生成不同的序列，
并带有一个数字表示哪一组修饰符处于活动状态。

如果你不知道这意味着什么，
你可能不需要摆弄它。

\S{config-appcursor} 控制\i{应用程序方向键}模式

应用程序光标键模式是服务器更改箭头键
发送的控制序列的一种方式。 在正常模式下，
箭头键将 \c{ESC [A} 发送到 \c{ESC [D}。
在应用模式下，他们将 \c{ESC OA} 发送到 \c{ESC OD}。

应用程序光标键模式可以由服务器打开和关闭，
具体取决于应用程序。
PuTTY 允许您配置初始状态。

您还可以使用\q{功能}配置面板完全禁用
应用程序光标键模式；
请参阅 \k{config-features-application}。

\S{config-appkeypad} 控制\i{应用程序数字小键盘}模式

应用程序键盘模式是服务器更改
数字键盘行为的一种方式。

在正常模式下，键盘的行为类似于普通的 Windows
键盘：打开 \i{NumLock} 时，数字键会生成数字，
而关闭 NumLock 时，它们就像箭头键和 Home、End 等。

在应用模式下，所有键盘按键都会发送特殊的控制序列，
\e{包括}  Num Lock。 Num Lock 不再像 Num Lock 那样工作，
而是成为另一个功能键。

根据您运行的 Windows 版本，您可能会发现每次
按下 Num Lock 时 Num Lock 指示灯仍会闪烁，
即使在应用程序模式处于活动状态
且 Num Lock 就像一个功能键时也是如此。 这是不可避免的。

服务器可以根据应用程序打开和关
闭应用程序键盘模式。
PuTTY 允许您配置初始状态。

您还可以使用\q{功能}配置面板完全禁用
应用程序键盘模式；
请参阅 \k{config-features-application}。

\S{config-nethack} 使用\i{NetHack键盘模式}

PuTTY 有一个玩 NetHack 的特殊模式。
您可以通过在\q{数字键盘的初始状态}控
件中选择\q{NetHack}来启用它。

在此模式下，数字键盘键 1-9 生成 NetHack
移动命令 (\cw{hjklyubn})。 5 键
生成 \c{.} 命令（什么都不做）。

此外，使用小键盘键按下 Shift 或 Ctrl 会生成
您期望的 Shift 或 Ctrl 键（例如，keypad-7
生成\cq{y}，因此 Shift-keypad-7 生成\cq{Y}，
Ctrl-keypad-7 生成 Ctrl -Y); 这些命令告
诉 NetHack 继续向同一个方向移动，直到你遇到有趣的事情。

出于某种原因，此功能仅在 \i{Num Lock}
开启时才能正常工作。 我们不知道为什么。

\S{config-compose} 启用类似DEC的\ii{Compose键}

DEC 终端有一个 Compose 键，
它提供了一种易于记忆的输入\i{重音字符}的方式。
您按 Compose，然后再键入两个字符。
这两个字符被\q{组合}以产生重音字符。
字符的选择被设计成易于记忆； 例如，
组合\q{e}和\q{`}会产生\q{\u00e8{e-grave}}字符。

如果您的键盘具有 Windows \i{应用程序键}，则它在
PuTTY 中充当 Compose 键。 或者，如果您启
用\q{\i{AltGr} 作为 Compose 键}选项，AltGr 键将成为 Compose 键。

\S{config-ctrlalt} \q{Control-Alt与\i{AltGr}不同}

一些旧键盘没有 AltGr 键，
这可能会导致难以键入某些字符。
PuTTY 可以配置为将组合键 Ctrl + Left Alt 以与 AltGr 键相同的方式处理。

默认情况下，选中此复选框，
并且组合键 Ctrl + Left Alt 执行完全不同的操作。
PuTTY 对左 Alt 键的通常处理是将 Escape (Control-\cw{[}) 字符
添加到其余按键将生成的任何字符序列的前缀。
如，Alt-A 生成 Escape 后跟 \c{a}。
所以 Alt-Ctrl-A 会生成 Escape，然后是 Control-A。

如果您取消选中此框，
Ctrl-Alt 将成为 AltGr 的同义词，
因此您可以使用它来键入额外的图形字符（如果您的键盘有）。

（但是，Ctrl-Alt 永远不会充当 Compose 键，
而不与\q{AltGr充当Compose键}相关）
请参阅 \k{config-compose}。)

\H{config-bell} 提示音面板

提示音面板控制\i{终端声音}提示功能：
服务器使 PuTTY 向您发出哔哔声的能力。

在默认配置下，当服务器发送带有 ASCII
码 7 (Control-G) 的字符时，
PuTTY 会播放 \i{Windows Default
Beep} 声音。 这并不总是您希望终端响
铃功能执行的操作； 提示音面板允许您配置替代操作。

\S{config-bellstyle} \q{设置提示音类型}

此控件允许您选择在终端提示
音上发生的各种不同操作：

\b 选择\q{暂无}\I{terminal bell, disabling}
会完全禁用提示音。 在这种模式下，服务器可以发送任意数量
的 Control-G 字符，并且不会发生任何事情。

\b \q{系统默认提示音}是默认设置。
它会导致播放 Windows 系统\q{默认提示音}。 要更改此声音的含义，或在似乎没有任何
反应时对其进行测试，
请使用 Windows 控制面板中的声音配置器。

\b \q{\ii{可视提示音}}是系统默认提示音的无声替代方案。
在这种模式下，当服务器发送 Control-G 时，
整个 PuTTY 窗口将闪烁白色，持续几分之一秒。

\b \q{\i{PC蜂鸣器}提示音}不言自明的。

\b \q{播放自定义\i{提示音}}允许您指定一个特定的
声音文件供 PuTTY 单独使用，甚至由特定的单
个 PuTTY 会话使用。
这使您可以将 PuTTY 提示音与系统上的任何其他声音区分开来。
如果选择此选项，
您还需要在\q{自定义提示音文件}指定声音文件。

\S{config-belltaskbar} \q{\ii{任务栏}/\I{window caption}标题
栏提示音标志}

如果在窗口不在输入状态时出现提示音，
此功能控制在 Windows 任务栏中
的 PuTTY 窗口条目会发生什么。

在默认状态（\q{已禁用}）下，不会发生任何异常情况。

如果您选择\q{常规}，
则当出现铃声且窗口不在焦点上时，
窗口的任务栏条目及其标题栏将改变颜色，
让您知道 PuTTY 会话正在引起您的注意。
颜色的变化会一直持续到您选择窗口为止，
因此您可以在终端中将几个 PuTTY 窗口最小化，离开键盘，
并确保在返回时不会错过任何重要的提示。

\q{闪烁}更加醒目：任务栏条目会不断闪烁，
直到您选择窗口。

\S{config-bellovl} \q{控制\i{提示音重复}设置}

终端会话中的一个常见用户错误是在不适当的文
件类型（例如可执行文件、图像文件或 ZIP 文件）
上意外运行 Unix 命令 \c{cat}（或等效命令）。
这会产生大量发送到终端的非文本字符流，
其中通常包含大量触发提示音的字符。
因此，终端机的蜂鸣声通常不会停止十分钟，
办公室里的其他人都会生气。

为了避免这种行为，或任何其他原因导致过度的声音提示，
PuTTY 包含一个提示音过载管理功能。在默认配置中，
在两秒内接收超过五个铃音字符将导致过载功能激活。
一旦重载功能被激活，更多的提示音将完全没有效果
\I{terminal bell,disabling}，
所以你的二进制文件的其余部分将被无
声地发送到屏幕上。在五秒钟内没有收到更多铃声后，
过载功能将再次自行关闭，
提示音将重新启用。

如果您希望完全禁用此功能，
您可以使用复选框\q{过度提醒时暂时禁用提示音}将其关闭。

或者，如果您喜欢铃声过载
功能但不同意设置，
您可以配置详细信息：多少铃声构成过载，
它们必须到达的时间段有多短，
以及静音时间多长在过载功能自行停用之前需要。

终端中的任何按键都始终禁用铃过载模式。
这意味着它可以响应大量意外的数据流，
但不会干扰产生哔哔声的普通命
令行活动（例如文件名完成）。

\H{config-features} 高级设置

PuTTY的\i{终端仿真}功能非常强大，
可以在远程服务器控制下做很多事情。
其中一些功能可能会由于
错误或配置异常的服务器应用程序而导致问题。

功能配置面板允许您禁用
PuTTY 的一些更高级的终端功能，以防它们引起麻烦。

\S{config-features-application} 禁用应用程序数字小键盘和方向键

\I{Application Keypad}数字小键盘应用模
式(请参阅 \k{config-appkeypad})
和\I{Application Cursor Keys}方向键应用模
式(请参考 \k{config-appcursor}) 改变小
键盘和光标键的行为。 一些应用程序启用了这些模式，
但随后无法正确处理修改后的键。 无论服务器尝试做什么，
您都可以强制永久禁用这些模式。

\S{config-features-mouse} 禁用\cw{xterm}风格的\i{鼠标接管}

PuTTY 允许服务器发送\i{控制代码}，
让它接管鼠标并将其用于\i{复制和粘贴}以外的目的。
使用此功能的应用程序包括文本模式 Web
浏览器\i\c{链接}、Usenet 新闻阅读器 \i\c{trn}
版本 4 和文件管理器 \i\c{mc} (Midnight Commander)。

如果您发现此功能不方便，
可以使用“\q{禁用 xterm 样式的
鼠标报告}控件禁用它。 选中此框后，
鼠标将\e{终以}以正常方式进行复制和粘贴。

请注意，即使应用程序接管了鼠标，您仍然可
以通过在选择和粘贴时按住 Shift 键来管
理 PuTTY 的复制和粘贴，除非您故意关闭
了此功能 (请参阅 \k{config-mouseshift})。

\S{config-features-resize} 禁用远程控制调整\i{终端大小}

PuTTY 能够响应来自服务器的命令更
改终端的大小和位置。
如果您发现 PuTTY 意外或不方便地执行此操作，
您可以告诉 PuTTY 不要响应这些服务器命令。

\S{config-features-altscreen} 禁用切换到\i{备用终端屏幕}

许多终端，包括 PuTTY，都支持\q{备用屏幕}。
这与普通终端屏幕大小相同，但分开。
通常，基于屏幕的程序（例如文本编辑器）可能会
在启动之前将终端切换到备用屏幕。
然后在运行结束时，它切换回主屏幕，
您可以看到与启动编辑器之前一样的屏幕内容。

有些人不希望这种情况发生。
如果您希望编辑器与终端活动的其余部分在同一屏幕上运行，
您可以完全禁用备用屏幕功能。

\S{config-features-retitle} 禁用远程控制更改\i{窗口标题}

PuTTY 能够更改窗口标题以
响应来自服务器的命令。
如果您发现 PuTTY 意外或不方便地执行此操作，
您可以告诉 PuTTY 不要响应这些服务器命令。

\S{config-features-qtitle} 响应远程\i{窗口标题}查询

PuTTY 可以选择提供允许服务器应用
程序查找本地窗口标题的 xterm 服务。
默认情况下禁用此功能，但如果您确实需要，可以将其打开。

请注意，此功能存在\e{潜在的 \i{安全隐患}}。
如果恶意应用程序可以将数据写入您的终端（例如，
如果您只是在服务器计算机上对其他人拥有的文件进行\c{cat}），
它可以更改您的窗口标题(除非您已按照中
能 \k{config-features-retitle}
所述禁用此功)然后使用此服务将新\q{窗口标题}
发送回服务器，就像在键盘上键入一样。
这允许攻击者伪造按键，并可能导致您的服务器端
应用程序执行您不想要的操作。 因此，此功能默认禁用，
我们建议您不要将其
设置为\q{窗口标题}，除非您\e{真的}知道自己在做什么。

此选项有三个设置：

\dt \q{无}

\dd PuTTY 不会对相关的转义
序列做出任何响应。
这可能会扰乱期待某种响应的服务器端软件。

\dt \q{空字符串}

\dd PuTTY 做出格式良好的响应，但将其留空。
因此，期望响应的服务器端软件保持正常运行，
但攻击者无法影响响应字符串。
如果您没有更好的想法，这可能是您想要的设置。

\dt \q{窗口标题}

\dd PuTTY 以实际的窗口标题进行响应。
由于上述原因，这是危险的。

\S{config-features-clearscroll} 禁用远程控制\i{清除回滚}缓冲区

PuTTY 能够响应来自服务器的命令清
除终端的回滚缓冲区。
如果您发现 PuTTY 意外或不方便地执行此操作，
您可以告诉 PuTTY 不要响应该服务器命令。

\S{config-features-dbackspace} 禁用\i{破坏性退格}

通常，当 PuTTY 从服务器接收到字符 127 (^?) 时，
它会执行\q{破坏性退格}：将光标向左移
动一个空格并删除其下的字符。
这显然会在某些应用程序中引起问题，
因此 PuTTY 提供了将字符 127
配置为执行正常退格（不删除字符）的能力。

\S{config-features-charset} 禁用远程控制
\i{设置字符集}

PuTTY 能够更改其字符集配置以响应
来自服务器的命令。 某些程序会意外或不
方便地发送这些命令。 特别是，\i{BitchX}
（一个 IRC 客户端）似乎习惯于将字符集重
新配置为不同于用户预期的字符集。

如果您发现重音字符没有按照您期望的方式显示，
尤其是在您运行 BitchX 时，
您可以尝试禁用远程字符集配置命令。

\S{config-features-shaping} 禁用\i{阿拉伯语文本修整}

PuTTY 支持阿拉伯文本的整形，
这意味着如果您的服务器发送以基本 \i{Unicode} 阿拉伯字母书写的文本，
那么它将在将其打印到屏幕上之
前将其转换为正确的显示形式。

如果您使用的全屏软件没有预料到会发生这种情况
（特别是如果您不是说阿拉伯语的人，并且您意
外地发现自己在处理不支持阿拉伯语的应用程序
中的阿拉伯语文本文件），您可能会发现\i{显
示内容损坏}。 通过勾选此框，您可以禁用阿
拉伯语文本整形，以便 PuTTY 精确显
示它被告知要显示的字符。

您可能还会发现需要禁用双向文本
显示；请参阅 \k{config-features-bidi}。

\S{config-features-bidi} 禁用\i{双向文本}显示

PuTTY 支持双向文本显示，
这意味着如果您的服务器发送以通常
从右到左显示的语言（例如\i{阿拉伯语}或\i{希
伯来语}）编写的文本，那么 PuTTY 会自动将其翻转，
以便在正确的方向显示屏幕。

如果您使用的全屏软件没有预料到会发生这种
情况（特别是如果您不是说阿拉伯语的人，并且
您意外地发现自己在处理不支持阿拉伯语的应用
程序中的阿拉伯语文本文件），您可能会
发现\i{显示内容损坏}。 通过勾选此框，
您可以禁用双向文本显示，以便 PuTTY
在所有情况下从左到右显示文本。

您可能还会发现需要禁用阿拉伯语
文本整形；请参阅 \k{config-features-shaping}。

\S{config-features-bracketed paste} 禁用 \i{bracketed paste} 括号内粘贴模式

默认情况下，当您将文本粘贴到终端窗口时，它会作为终端输入
发送到服务器，就像您键入相同的文本一样
进入终端窗口（它将全部发送
一次，比你打字的速度要快得多）。

但是，终端应用程序可以通过
终端来启用 \q{括号内粘贴模式}。
在此模式下，粘贴的数据在输入流中被标记，
方法是发送一个特殊的控制序列在粘贴之前，另一个在末尾。

终端应用程序可以使用此信息来处理粘贴的数据与键盘输入不同。
例如，基于终端的文本编辑器可以将输入视为文本数据，
即使它的某些字符会触发特殊的编辑器功能。
一个 shell 可以将粘贴的输入内容看作是不可信任的，
以防其他未知的恶意应用程序将命令偷偷放入 shell 的剪贴板
现代版本的\cw{bash}
将在命令行上突出显示粘贴的数据，
并且在您按 Return 键确认之前不去运行它，
即使粘贴的数据包含换行符。

在极端情况下，括号内粘贴模式可能会引入
比它解决的问题更大意外。所以你可以使用这个复选框
以将其完全关闭。如果您这样做，则 PuTTY 将始终完全按照
您在键盘上键入的数据发送粘贴数据，
而忽略服务器是否要求括号内粘贴模式。

\H{config-window} 窗口面板

窗口配置面板允许您控
制 \i{PuTTY 窗口}的各个方面。

\S{config-winsize} 设置PuTTY\I{window size}窗口的大小

\q{\ii{列}}和\q{\ii{行}}框可让您将 PuTTY 窗口设
置为精确的大小。 当然，
您也可以在会话运行时\I{window resizing}将窗口拖动到新的大小。

\S{config-winsizelock} 调整窗口大小时的操作

这些选项允许您控制当用户尝试使用\I{window resizing}
调整 PuTTY 窗口的大小时窗口显示发生的情况。

这里有四个选项：

\b \q{更改行列数}: 字体大小
不会改变。 （这是默认设置。）

\b \q{更改字体大小}: 终端中的行数和列数将保持不变，
\i{字体大小}会发生变化。

\b \q{仅在最大化时更改字体大小}: 调整窗口大小时，
行数和列数会发生变化，\e{除非}窗口\i{最大化}（
或恢复）时，字体大小才会发生变化。
（在这种模式下，在调整大小的同时按
住 Alt 键也会导致字体大小发生变化。）

\b \q{完全禁止调整大小}: 终端将
完全拒绝调整大小。

\S{config-scrollback} 控制\i{回滚}

这些选项可让您配置 PuTTY 在滚动离开屏幕顶
部后保留文本的方式 (请参阅 \k{using-scrollback})。

\q{回滚行数}框可让您配置 PuTTY 保留的文本行数。
\q{显示滚动条}选项允许您隐藏\i{滚动条}
（尽管您仍然可以使用键盘查看回滚，
请参阅 \k{using-scrollback})。
您可以分别配置滚动条是否
以\i{全屏模式}和普通模式显示。

如果您在服务器向 PuTTY 发送更多文本时查
看部分回滚，则屏幕将恢复为显示当前终端内容。
您可以通过关闭\q{显示更新
时重置回滚}来禁用此行为。
您还可以通过打开\q{按键时
重置回滚}在按键时恢复屏幕。

\S{config-erasetoscrollback} \q{将清屏的内容推送到回滚}

启用此选项后，当服务器端应用程序清除屏幕时，
终端屏幕的内容将被推送到回滚中，
以便您的回滚将更好地
记录您过去屏幕上的内容。

如果应用程序切换到\i{备用屏
幕}(更多信息请参考 \k{config-features-altscreen} )，
然后主屏幕的内容将在回滚中可见，
直到应用程序再次切换回来。

默认情况下启用此选项。

\H{config-appearance} 外观面板

外观配置面板允许您控制
\I{PuTTY window}PuTTY 窗口外观的各个方面。

\S{config-cursor} 控制\i{光标}的外观

\q{光标外观}选项可让您将光标配置
为块、下划线或垂直线。
当窗口不是当前窗口时，块光标变为
空框； 下划线或垂直线变为虚线。

\q{\ii{光标闪烁}}选项使光标闪烁。
这适用于任何光标模式。

\S{config-font} 控制终端窗口中使用的\i{字体}

此选项允许您选择 PuTTY 终端窗口
用于在会话中显示文本的\I{font size}字体、大小。

默认情况下，您可以从系统上安装的所有固定
宽度字体中进行选择，因为 VT100 风格的终
端处理需要固定宽度字体。 但是，如果您勾选标记为\q{允许选择
可变间距字体}的框，PuTTY 也会
提供可变宽度字体：如果您选择
其中一种，字体将被强制转换为固定大小的字符单元，
这可能会 看起来不太好（但可以使用某些字体）。

\S{config-mouseptr} \q{在窗口中输入时隐藏\i{鼠标指针}}

如果启用此选项，如果选择 PuTTY 窗口并按
下某个键，鼠标指针将消失。 这样，当您在会话中工作时，
它不会遮挡窗口中的任何文本。
只要你移动鼠标，指针就会重新出现。

默认情况下禁用此选项，
因此鼠标指针始终可见。

\S{config-winborder} 控制\i{窗口边框}

PuTTY 允许您在一定程度
上配置窗口边框的外观。

标记为\q{下沉边框边缘}的复选框将
窗口边框的外观更改为更像 DOS
框：边框的内侧边缘被突出显示，
就好像它下沉以与窗口内的表面相接。
这也使边框更厚一些。 很难形容。 试试看你喜不喜欢。

您还可以使用\q{文本与窗口间的间隙}控
件在窗口中的文本和边框之间配置完全
空白的间隙。 默认情况下，
这设置为一个像素。 您可以将其减少到零，或进一步增加。

\H{config-behaviour} 行为面板

行为配置面板允许您控制 \I{PuTTY window}PuTTY
窗口行为的各个方面。

\S{config-title} 控制\i{窗口标题}

\q{窗口标题}编辑框允许您设置 PuTTY 窗口的标题。
默认情况下，窗口标题将包含\i{主机名}，
后跟\q{PuTTY}，例如 \c{server1.example.com - PuTTY}。
如果你想要一个不同的窗口标题，这是设置它的地方。

PuTTY 允许服务器发送在会话中修改窗口
标题的 \c{xterm} \i{控制序列} (除非
这被禁用 - 请参阅 \k{config-features-retitle})；
因此，此处设置的标题字符串只是\e{初始}窗口标题。

除了\e{窗口}标题，还有一个 \c{xterm} 序
列来修改窗口\I{icon title}标题的\e{图标}。
这在窗口系统中是有意义的，在窗口系统中，
窗口在最小化时会变成一个图标，
例如 Windows 3.1 或大多数 X 窗口系统设置；
但在类似 Windows 95 的用户界面中，它并不适用。

默认情况下，PuTTY 仅使用服务器提供
的\e{窗口}标题，完全忽略图标标题。 如果出于某种原因您想同时查看
这两个标题，请选中标有\q{使用单独的标题和图标}选框。 如果你这样做，
如果你\i{最小化} PuTTY 窗口，
PuTTY 的\I{window caption}窗口标题和
任务栏标题将变为服务器提供的图标标题，
如果你恢复它，则改回服务器提供的窗口标题。
（如果服务器没有费心提供窗口或图标标题，这一切都不会发生。）

\S{config-warnonclose} \q{\i{关闭窗口}前的警告}

如果您在包含正在运行的会话的 PuTTY 窗口
中按下\i{关闭按钮}，PuTTY 将弹出一个警告窗口，
询问您是否真的要关闭该窗口。 会话已经终止的窗口
总是可以在没有警告的情况下关闭。

如果您希望能够快速关闭窗口，
可以禁用\q{关闭窗口前发出警告}选项。

\S{config-altf4} \q{\i{ALT-F4}关闭窗口}

默认情况下，按 ALT-F4 会导\I{closing window}致窗口
关闭（或出现警告框；请参阅 \k{config-warnonclose})。
如果您禁用\q{按 ALT-F4 关闭窗口}选项，
则按 ALT-F4 只会将按键序列发送到服务器。

\S{config-altspace} \q{\i{ALT-Space}显示\ii{系统菜单}}

如果启用此选项，则按 ALT-Space 将弹出 PuTTY
窗口的菜单，就像单击左上角一样。
如果它被禁用，那么按 ALT-Space
只会将 \c{ESC SPACE} 发送到服务器。

一些适用于 Windows 的辅助功能程序\i{可能需要}启
用此选项才能成功控制 PuTTY 的窗口。
例如，\i{Dragon NaturallySpeaking}要求它既要通过
语音打开系统菜单，
又要关闭、最小化、最大化和恢复窗口。

\S{config-altonly} \q{\i{Alt}显示\ii{系统菜单}}

如果启用此选项，则按下并释放 ALT
将弹出 PuTTY 窗口的菜单，
就像单击左上角一样。 如果它被禁用，
那么按下并释放 ALT 将无效。

\S{config-alwaysontop} \q{确保窗口\i{始终在顶部}}

如果启用此选项，PuTTY 窗口
将位于所有其他窗口的顶部。

\S{config-fullscreen} \q{Alt-Enter \ii{全屏}}

如果启用此选项，则按 Alt-Enter 将
使 PuTTY 窗口变为全屏。
再次按 Alt-Enter 将恢复以前的窗口大小。

全屏功能也可以从 \ii{系统菜单}中使用，
即使它被配置为在 Alt-Enter 键上不可用。
请参阅 \k{using-fullscreen}。

\H{config-translation} 字符转换面板

字符转换配置面板允许您控制服务
器理解\i{字符集设置}和 PuTTY
理解的字符集之间的转换。

\S{config-charset} 控制字符集转换

在交互式会话期间，PuTTY 从服务器接收 8 位字节流，
为了在屏幕上显示它们，它需要知道用什
么字符集来解释它们。
同样，PuTTY 需要知道如何翻译你的击键
进入服务器期望的编码。 遗憾的是，
PuTTY 和服务器之间没有令人满意
的机制来传递这些信息，因此通常必须手动配置。

有很多字符集可供选择。
\q{远程字符集}选项可让您选择一个。

默认情况下，PuTTY 将使用 \i{Unicode} 的 \i{UTF-8} 编码，
它几乎可以表示任何字符； 来自服务器的数据被解释为 UTF-8，
击键以 UTF-8 编码发送。
这是大多数现代 Linux 发行版默认情况下所期望的。
但是，如果这对您的服务器来说是错误的，
您可以使用此控件选择不同的字符集。

其他一些值得注意的字符集是：

\b \i{ISO-8859} 系列都
是标准字符集，包括适用
于不同语言集的各种重音字符。

\b \i{Win125x} 系列由 Microsoft 定义，
用于类似目的。 特别是 Win1252 几乎等同于 ISO-8859-1，
但包含一些额外的字符，
例如匹配的引号和欧元符号。

\b 如果您想要带有块图形和画线字符的
旧 IBM PC 字符集，您可以选择\q{\i{CP437}}。

如果您需要下拉列表中未列出的数字\i{代码页}的支持，
例如代码页 866，则可以尝试在列表框中手动输
入其名称（例如 \c{\i{CP866}}）。
如果 Windows 的底层版本安装了适
当的转换表，PuTTY 将使用它。

\S{config-cjk-ambig-wide} \q{将模棱两可的字符视为\i{CJK}宽字符}

有一些 \I{East Asian Ambiguous
characters}Unicode 字符的宽度没有明确定义。
在大多数情况下，出于换行等目的，
此类字符\I{character width}应被视为单宽；
但是，在某些 CJK 上下文中，由于历史原因，\I{wrapping,
terminal}它们被更好地视为双宽度，
并且某些服务器端应用程序可能希望它们以这样的方式显示。 设置此选项将导致 PuTTY 采用双倍宽度解释。

如果您使用旧的 CJK 应用程序，并且发现您的行在
错误的位置换行，或者您有其他显示问题，
您可能想要使用此设置。

此选项仅在 UTF-8 模式下有效
(请参阅 \k{config-charset})。

\S{config-cyr} \q{\i{大写锁定键}用于\i{Cyrillic切换}}

如果您需要在同一文档中并排键入（例如）\i{俄语}和英语，
此功能允许您使用 CapsLock 键在美国/英国键盘布局
和Cyrillic键盘布局之间切换。

目前，如果您的本地键盘布局不是美国
或英国，则此功能预计无法正常工作。

\S{config-linedraw} 控制\i{画线字符}的显示

VT100 系列终端允许服务器发送控制序列，
这些\i{控制序列}临时转换为单独的字符集，
用于绘制简单的线条和框。 但是，PuTTY 可以通
过多种方式尝试找到合适的字符，
而使用正确的方式取决于本地配置的\i{字体}。
一般来说，您可能应该尝试很多选项，
直到找到您的特定字体支持的选项。

\b \q{使用Unicode画线代码点绘制}
尝试使用 \i{Unicode} 中存在的方框字符。
对于良好的 Unicode 支持字体，这可能是最可靠和最实用的选项。

\b \q{简单的画线}   假定字体根本\e{无法}生
成行和框字符，因此它将使用 \c{+}、\c{-} 和 \c{|} 字
符来绘制框的近似值。 如果其他选项均无效，
则应使用此选项。

\b \q{X Windows 画线绘制}
用于具有特殊编码的字体，
其中最低 32 个字符位置（低于 ASCII 可打印范围）
包含画线字符。 任何标准的 Windows 字体都不太
可能出现这种情况； 它可能只适用于定制
字体或从 X Window 系统自动转换的字体。

\b \q{ANSI/OEM 模式画线}  尝试在两个不同的字符集中
使用相同的字体，以获得更广泛的字符。
这并不总是有效。 根据您尝试使用的字符集，
某些字体声称其大小不同。

\b \q{仅用OEM模式编码绘制}   比这更可靠，
但可能会错过主要角色集中的其他角色。

\S{config-linedrawpaste} 控制画线字符的
\i{复制和粘贴}

默认情况下，
当您复制并粘贴包含 VT100 线条
和方框图字符的 PuTTY 屏幕时，PuTTY 将以它们在
屏幕上显示的形式粘贴它们：\i{Unicode} 线条绘图代码
点或\q{简单}线条绘制字符 \c{+}、\c{-} 和 \c{|}。
复选框\q{将 VT100 画线字符复制并粘贴为 lqqqk}会禁用此功能，
因此画线字符将被粘贴为生成它们时打印的 \i{ASCII} 字符。
这通常意味着它们主要以 \c{q} 和 \c{x} 的形式出现，
在拐角处散布着 \c{jklmntuvw}。
例如，如果您尝试在另一个程序中重新创建相同的框布局，
这可能会很有用。

请注意，此选项仅适用于使用 VT100
机制打印的画线字符。
作为 Unicode 代码点接收的画
线字符将始终粘贴为 Unicode。

\S{config-utf8linedraw} VT100 画线与 UTF-8 结合

如果 PuTTY 配置为以 UTF-8 编码
处理来自服务器的数据，则默认情况下，
它会禁用旧的 VT100 样式的控制序列系统，
该系统会导致小写字母暂时被线条绘制字符替换。

基本原理是，在 UTF-8 模式下，
无论如何您都不需要这些控制序列，
因为它们访问的所有画线字符都已作为 Unicode 字符可用，
因此应用程序无需将终端置于特殊状态对付他们。

此外，它还消除了终端\e{意外}进入该状态的风险：
如果您不小心将不受控制的二进制数据写入非 UTF-8 终端，
则令人惊讶的是，您的下一个 shell 提示符显示为一系列行 -绘制字符，
然后您必须记住或查找如何退出该模式。
因此，默认情况下，
UTF-8 模式根本没有像这样令人困惑的模式，
无论是意外还是故意进入。

但是，并非所有应用程序都会这样看。
即使是 UTF-8 终端用户有时仍必须运行尝试以
老式方式打印线条绘制字符的软件。
因此，配置选项\q{即使在 UTF-8 模式下也
启用 VT100 画线}将 PuTTY 置于混合模式，
在这种模式下，它可以理解 VT100 样式的控制序列，
这些控制序列会改变 ASCII 小写字母的含义，\e{并且}可以理解 UTF-8。

\H{config-selection} 选择面板

选择面板允许您控制在 PuTTY
窗口中\i{复制和粘贴}工作的方式。

\S{config-mouse} 更改鼠标按钮的动作

PuTTY 的复制和粘贴机制默认以 Unix \i\c{xterm}
应用程序为模型。
X Window 系统使用三键鼠标，
该系统中的约定是\i{左键}\I{selecting text}选择，
\i{右键}扩展现有选择，\i{中键}粘贴。

Windows 通常只有两个鼠标按钮，
因此在 Windows 上运行时，
PuTTY 是可配置的。在 PuTTY 的默认配置（\q{妥协}）中，
\e{右}键粘贴，\e{中间}按
钮（如果有的话）\I{adjusting a selection}扩展选择。

如果您有一个\i{三键鼠标}并且您已经
习惯了 xterm 排列，
您可以使用\q{鼠标按钮操作}控件来选择它。

或者，选择\q{Windows}选项后，中间按钮会展开，
并且右键会弹出一个\i{右键菜单}
（其中一个选项是\q{粘贴}）。
（无论此选项的设置如何，按住 Ctrl
并单击鼠标右键始终可以使用此右键菜单。）

（当 PuTTY 本身在 Unix 上运行时，
它遵循 X Window System 约定。）

\S{config-mouseshift} \q{Shift 覆盖应用程序对鼠标的使用}

PuTTY 允许服务器发送\i{控制代码}，
让它\I{mouse reporting}接管鼠标并将其用
于\i{复制和粘贴}以外的目的。
使用此功能的应用程序包括文本模式 Web 浏览
器\c{链接}、Usenet 新闻阅读器 \c{trn} 版
本 4 和文件管理器 \c{mc} (Midnight Commander)。

运行这些应用程序之一时，按下鼠标按钮
不再执行复制和粘贴。如果您确实需要复
制和粘贴，您仍然可以在单击鼠标的同
时按住 Shift 键。

但是，理论上应用程序甚至可以检测和
使用 Shift + 鼠标点击。我们不知道有任何应用程
序这样做，但如果有人写过一个，
取消选中\q{Shift 覆盖应用程序对鼠标
的使用}复选框将导致 Shift + 鼠标单击也转到服务器（以便鼠标
驱动复制和粘贴将被完全禁用）。

如果您想完全阻止应用程序接管鼠标，
您可以使用功能控制面板执行此操作；
请参阅 \k{config-features-mouse}。

\S{config-rectselect} 默认选择模式

如 \k{using-selection} 所述，PuTTY 有两种选择要
复制到剪贴板的文本的模式。
在默认模式（\q{正常}）下，将鼠标从 A 点拖
动到 B 点会选择包含 A 的行的末尾、
中间的所有行，以及包含 B 的行的开头。
在其他模式下 （\q{矩形块}），在两点之间拖动
鼠标定义一个矩形，并复制该矩形内的所有内容。

通常，您必须在拖动鼠标的同时按住 Alt 以选择矩形块。
使用\q{默认选择模式}控件，
您可以将\i{矩形选择}设置为默认设置，
然后您必须按住 Alt 才能获得正常行为。

\S{config-clipboards} 为剪贴板分配复制和粘贴操作

在这里，您可以配置 PuTTY 的各
种复制和粘贴操作写入或读取哪些剪贴板。

大多数平台，包括 Windows，都有一个系统剪贴板。
在这些平台上，PuTTY 提供了第二个类似剪贴板的工具，
它允许您粘贴上次在\e{此窗口}中选择的文本，
无论它当前是否也在系统剪贴板中。
默认情况下不启用此功能。

X Window 系统（大多数 Unix 图形界面的基础）
提供多个（\q{\i{剪贴板选择}}），
许多应用程序通过不同的用户界面机制支持多个剪贴板。
当 PuTTY 本身在 Unix 上运行时，
它具有与这些选择相关的更多可配置性。

最常用的两个选项称为\cq{\i{PRIMARY}}和\cq{\I{CLIPBOARD}}；
在支持这两者的应用程序中，通常的行为是 \cw{PRIMARY}
仅用于鼠标操作（\i{选择}文本会自动将
其复制到 \cw{PRIMARY}，并从
\cw{PRIMARY}\i{单击鼠标中键}粘贴），
而 \cw{\i{CLIPBOARD}} 由显式复制和粘贴菜
单项或按键等使用作为 \i{Ctrl-C} 和 \i{Ctrl-V}。

\S2{config-selection-autocopy} \q{自动复制选定文本}

复选框\q{自动将所选文本复制到系统剪贴板}控
制在 PuTTY 终端窗口中选择文本是否自动具
有将其复制到系统剪贴板的副作用，
而无需单独的用户界面操作。

在 X 上，此选项的措辞略有更改，
因此提到了\cq{CLIPBOARD}来代替\q{系统剪贴板}。
按照惯例，在终端窗口中选择的文本将始终自动
放置在 \cw{PRIMARY} 选择中，
但如果您勾选此框，
它也会同时放置在\cq{剪贴板}中。

\S2{config-selection-clipactions} 为 UI 操作选择剪贴板

PuTTY 具有三个用户界面操作，
可配置为粘贴到终端（不包括菜单项）。
您可以单击配置为粘贴的任何鼠标按钮（如果有）
(请参阅 \k{config-mouse})；您可以按 \i{Shift-Ins}；
或者您可以按 \i{Ctrl-Shift-V}，尽管默认情况下不启用该操作。

您可以配置每个操作从哪个可用剪贴板粘
贴（包括完全关闭粘贴操作）。在具有单
个系统剪贴板的平台（例如 Windows）上，
可用选项是从该剪贴板粘贴或从 PuTTY 的
内存粘贴该窗口中\i{后选择的文本}。
在 X 上，标准选项
是 \cw{CLIPBOARD} 或 \cw{PRIMARY}。

（\cw{PRIMARY} 在概念上是相似的，
因为它还引用最后选择的文本——只
是跨所有应用程序，而不仅仅是这个窗口。）

这两个键盘选项都带有一个相应的键，
可以复制到同一个剪贴板。无论您配置 Shift-Ins 来粘
贴什么，\i{Ctrl-Ins} 都会复制到相同的位置；
同样，\i{Ctrl-Shift-C} 将复制到任何 Ctrl-Shift-V 粘贴的内容。

在 X 上，您还可以输入您选择的选择名称。
例如，有一个很少使用的标准选择，
称为\cq{\i{SECONDARY}}，
如果您在拖动选择或单击粘贴时按住 Meta 键，Emacs（例如）
可以使用它；如果您配置 PuTTY 键盘操作来访问此剪贴板，
那么您可以与其他应用程序对它的使用进行互操作。
您可以做的另一件事是自己发明一个剪贴板名称，
创建一个仅在 PuTTY 实例之间或\e{仅}在以该特
定方式配置的实例之间共享的特殊剪贴板。

\S{config-paste-ctrl-char} \q{允许粘贴文本中的控制字符}

剪贴板可能不仅包含文本（带有换行符和制表符），
还包含控制字符，例如 ESC，如果粘贴
到终端会话中，可能会产生令人惊讶的效果，
具体取决于服务器端运行的程序。 从恶作剧的网页复制文本
可能会将这些字符放到剪贴板上。

默认情况下，PuTTY 会过滤掉更不常见的控制字符，
只让更明显的文本格式字
符（换行符、制表符、退格符和 DEL）通过。

设置此选项会停止此过滤； 粘贴时，
剪贴板上的任何字符都会未经审查发送到会话。 例如，
如果您有意将控制字符粘贴用作一种简单的脚本形式，
这可能会很有用。

\H{config-selection-copy} 复制面板

复制配置面板控制与从终端窗
口复制到剪贴板特别相关的行为。

\S{config-charclasses} 字符类

如果您\I{word-by-word selection}\i{双击}开始拖动，
PuTTY 将在终端窗口中一次选择一个单词。
此部分允许您精确控制被视为单词的内容。

每个字符都有一个\e{类别}，
这是一个很小的数字（通常为 0、1 或 2）。
PuTTY 将单个单词视为同一类
中任意数量的相邻字符。 因此，通过修改对类的字符分配，
您可以修改逐字选择行为。

在默认配置中，\i{字符类}是：

\b Class 0 包含\i{空格}和控制字符。

\b Class 1 包含最多的\i{标点符号}。

\b Class 2 包含字母、数字
和一些标点符
号（双引号、减号、句点、正斜杠和下划线）。

因此，例如，如果您将 \c{@} 符
号分配给字符类 2，
您只需双击即可选择一个电子邮件地址。

为了调整这些分配，
您首先在列表框中选择一组字符。 然后在下面的编辑框中输入班级编号，
然后按\q{设置}按钮。

这种机制目前只涵盖 ASCII 字符，
因为扩展列表以涵盖整个 Unicode 是不可行的。

字符类定义可以通过服务器发送
的\i{控制序列}进行修改。
此配置选项控制\e{默认}状态，
当您重置终端时将恢复(请参阅 \k{reset-terminal})。
但是，如果您在会话中使用\q{更改设置}修改此选项，
它将立即生效。

\S{config-rtfcopy} 以\i{RTF}和纯文本格式复制

如果您启用\q{以RTF和纯文本格式复制}，
PuTTY 会将格式信息以及您复制的
实际文本写入剪贴板。
这样做的效果是，如果您粘贴到（比如说）文字处理器中，
文本将以 PuTTY 用来显示它的相同\i{字体}、\i{颜色}和
样式（例如粗体、下划线）出现在文字处理器中。

此选项很容易带来不便，
因此默认情况下它是禁用的。

\H{config-colours} 颜色面板

颜色面板允许您控制 PuTTY 对\i{颜色}的使用。

\S{config-ansicolour} \q{允许终端指定\i{ANSI颜色}}

默认情况下启用此选项。
如果禁用，PuTTY 将忽略服务器发送
的任何\i{控制序列}以请求彩色文本。

如果你有一个特别花哨的应用程序，
你可能想关闭这个选项，
让 PuTTY 只使用默认的前景色和背景色。

\S{config-xtermcolour} \q{允许终端使用xterm
\i{256色模式}}

默认情况下启用此选项。 如果禁用，PuTTY 将忽略服务器发送的任
何控制序列，这些控制序列使用 \cw{xterm} 最新版本支持的扩展 256 色模式。

如果您的应用程序应该使用 256 色模式但它不工作，
您可能会发现您需要告诉服务器您的终端支持 256 色。
在 Unix 上，您可以通过确保 \i\cw{TERM} 的
设置描述支持 256 色的终端来做到这一点。
您可以使用以下命令\c{infocmp}进行检查：

\c $ infocmp | grep colors
\c         colors#256, cols#80, it#8, lines#24, pairs#256,
\e         bbbbbbbbbb

如果您在输出中没有看到\cq{colors#256}，
您可能需要更改终端设置。
在现代 Linux 机器上，您可以尝试\cq{xterm-256color}。

\S{config-truecolour} \q{允许终端使用24位颜色}

默认情况下启用此选项。
如果禁用，PuTTY 将忽略服务器发送的任何控制序列，
这些控制序列使用现代终端支持
的控制序列来指定任意 24 位 RGB 颜色值。

\S{config-boldcolour} \q{通过改变…来表示粗体文本}

当服务器发送一个\i{控制序列}指示
某些文本应以\i{粗体}显示时，PuTTY 可以通
过多种方式处理此问题。 它可以将字体更改为粗体版本，
或者使用更亮的颜色使用相同的\i{字体}，
或者两者都可以（使颜色变亮\e{同时}加粗字体）。 此控件可让您选择哪个。

默认情况下，粗体由颜色表示，因此非粗体文本显示为浅灰色，
粗体文本显示为亮白色（其他颜色也类似）。
如果您将设置更改为\q{字体}框，
粗体和非粗体文本将以相同的颜色显示，
而字体将更改以指示差异。
如果选择\q{两者}，字体和颜色都会改变。

一些应用程序依赖于与黑色背
景区分开来的\q{\i{粗体黑色}}； 如果您选择\q{字体}，
它们的文本可能会变得不可见。

\S{config-logpalette} \q{尝试使用\i{逻辑调色板}}

逻辑调色板是一种机制，运行在\i{8位彩色}显
示器上的 Windows 应用程序可以精确地选
择它想要的颜色，而不是使用 Windows 标准默认值。

如果您在 8 位显示器上没有获得您要求的颜色，
您可以尝试启用此选项。
但是，请注意，它从来没有很好地工作过。

\S{config-syscolour} \q{使用\i{系统颜色}}

启用此选项将导致 PuTTY 忽略为\I{default background}
\I{default foreground}\q{默认背景/前景}
和\I{cursor colour}\q{光标颜色/文本}配置的颜色
(请参阅 \k{config-colourcfg})， 而是使用系统范围的默认值。

请注意，如果启用此选项，非粗体和\i{粗体文本}将
是相同的颜色。 您可能希望通过字体
更改来指示粗体文本(请参阅 \k{config-boldcolour})。

\S{config-colourcfg} 在\i{终端窗口}中调整颜色

主颜色控件允许您准确指定应显示的颜色。
要修改其中一种 PuTTY 颜色，
请使用列表框选择要修改的颜色。
该颜色的 \i{RGB 值}将显示在列表框的右侧。
现在，如果您按下\q{修改}按钮，
您将看到一个颜色选择器，
您可以在其中选择一种新颜色来代替旧颜色。
（如果您愿意，您也可以直接在编辑框中编辑 RGB
值；每个值都是 0 到 255 之间的整数。）

PuTTY 允许您设置\i{光标颜色}、
\i{默认前景}和\I{default background}默认背景，
以及所有\I{ANSI colours} ANSI码 可配置颜色（黑色、红色、绿色、黄色、
蓝色、洋红色、青色和白色）的精确阴影。 您还可以修改用于这些颜色
的\i{粗体}版本的精确阴影； 如果您选择用颜色表示，这些
用于显示粗体文本(请参阅 \k{config-boldcolour})，如
果服务器特别要求使用它们，
也可以使用它们。 （请注意，\q{默认粗体背景}\e{不是}用
于粗体文本的背景颜色；
它仅在服务器明确要求使用粗体背景时使用。）

\H{config-connection} 连接面板

连接面板允许您配置适用
于一种以上\i{连接}类型的选项。

\S{config-keepalive} 使用\i{keepalives}防止断开连接

如果您发现会话在空闲一段时间后意外关闭
（通常是\q{对等连接重置}），
您可能需要尝试使用此选项。

一些网络\i{路由器}和\i{防火墙}需要跟
踪通过它们的所有连接。通常，
如果在某个时间间隔后没有数据在任一方向传输，
这些防火墙将假定连接已失效。
如果一段时间内会话中没有任何流量，
这可能会导致 PuTTY 会话被防火墙意外关闭。

keepalive 选项（\q{Keepalives 之间的秒数}）
允许您将 PuTTY 配置为定期通过会话发送数据，
这种方式不会中断实际的终端会话。
如果您发现您的防火墙正在切断\i{空闲连接}，
您可以尝试在此字段中输入一个非零值。
该值以秒为单位；因此，例如，
如果您的防火墙在十分钟后切断连接，那
么您可能需要在框中输入 300 秒（5 分钟）。

请注意，keepalives 并不总是有用的。
如果您有防火墙在空闲期后断开连接，
它们会有所帮助；但是如果你和服务器之间的\i{网络连接中断}，
那么keepalives实际上会让事情变得更糟。
如果会话处于空闲状态，
并且端点之间的连接暂时丢失，
但在任何一方尝试发送任何内容之前恢复了连接，
那么就不会有问题 - 两个端点都不会注意到任何错误。但是，
如果一方在中断期间确实发送了一些东西，
它会反复尝试重新发送，
最终放弃并放弃连接。
然后当连接恢复时，
对方会发现第一方不再相信有打开的连接。
Keepalive 会使此类问题变得更糟，
因为它们会增加 PuTTY 在连接中断期间尝试发送数据的可能性。
（其他类型的周期性网络活动可能会导致这种行为；特别是 SSH-2 重新生成密钥可能会产生这种影响。
请参阅\k{config-ssh-kex-rekey}。)

因此，您可能会发现保持连接有助于连接丢失，
或者您可能会发现它们使情况变得更糟，
这取决于您和服务器之
间存在\e{什么类型}的网络问题。

只有 Telnet 和 SSH 支持 Keepalive；
Rlogin、SUPDUP 和 Raw 协议没有提供实现它们的方法。
（作为替代方案，请参阅 \k{config-tcp-keepalives}。)

请注意，如果您使用的是 SSH-1 并且服务器有一个错误，
导致它无法处理 SSH-1 忽略消息(请参阅 \k{config-ssh-bug-ignore1})，
启用keepalives不会有任何效果。

\S{config-nodelay} \q{禁用 \i{Nagle 算法}}

Nagle 算法是 TCP/IP 实现的一个细节，
它试图最小化通过网络连接发送的小数据包的数量。
启用 Nagle 算法后，PuTTY 的\i{带宽}
使用效率会稍高一些；
 禁用它后，您可能会发现在连接到某些类型的服务
 器时对击键的响应速度更快。

\i{交互式连接}默认禁用 Nagle 算法。

\S{config-tcp-keepalives} \q{启用 \i{TCP keepalives}}

\e{注意：}不应将 TCP keepalive 与
应用程序级 keepalive 相混淆，请参阅 \k{config-keepalive}。
如果有疑问，您可能需要应用程序级的保活；
TCP keepalives 是为了完整性而提供的。

TCP keepalives 的想法类似于应用程序级的 keepalives，并且适用相同的警告。
主要区别在于：

\b TCP keepalive 可用于\e{所有}网络连接类型，
包括 Raw、Rlogin 和 SUPDUP。

\b TCP keepalive 之间的间隔通常要长得多，
通常是两个小时； 这是由操作系统设置的，
不能在 PuTTY 中配置。

\b 如果操作系统没有收到对keepalive的响应，
它可能会快速连续发送更多信息，
如果没有收到响应则终止连接。

TCP keepalives 对于确保终止\i{半开放式连接}
可能比保持连接活动更有用。

默认情况下禁用TCP keepalives 。

\S{config-address-family} \q{\i{网络协议版本}}

此选项允许用户在新旧 Internet 协议和寻址
方案（\i{IPv4} 和 \i{IPv6}）之间进行选择。
所选协议将用于大多数传出网络
连接（包括与代理的连接）；然而，
隧道有自己的配置，
请参阅 \k{config-ssh-portfwd-address-family}。

默认设置为\q{自动}，这意味着 PuTTY 会做一些
明智的事情并尝试猜测您想要的协议。
（如果您指定文字 \i{Internet 地址}，它将使用该地址
所暗示的任何协议。如果您提供\i{主机名}，
它将查看该主机名存在哪些类型的地址；
如果有可用的 IPv6 地址，它将使用 IPv6，然后 如果没有，则返回 IPv4。）

如果您需要强制 PuTTY 使用特定协议，您可以将其
显式设置为\q{IPv4}或\q{IPv6}。

\S{config-loghost} \I{logical host name}\q{远程主机的注册名}

这使您可以告诉 PuTTY 它最
终连接的主机与它
认为正在建立网络连接的主机不同。

例如，如果您在一个 PuTTY 会话中设置了 SSH 端口转发，
以便将与某个任意端口（例如 \cw{localhost} 端口 10022）
的连接转发到另一台机器的 SSH 端口（例如 \cw{foovax} 端口 22），
您可能会使用它，
然后开始连接到转发端口的第二个 PuTTY。

在正常使用中，第二个 PuTTY 将访问它实际
连接的主机名和端口（即本例中的 \cw{localhost} 端口 10022）下
的\i{主机密钥缓存}。但是，使用逻辑主机名选项，
\e{您}可以配置第二个 PuTTY 以将主机密钥缓存在您
知道它最终会与之交谈的主
机名下（此处为 \c{foovax}）。

如果您希望通过许多不同的渠道连接到同一台实际服务
器（可能是因为您的端口转发安排不断变化），
这可能很有用：通过始终如一地设置逻辑主机名，
您可以安排 PuTTY 不会一直要求您重新确认它主机密钥。
相反，如果您希望使用相同的本地端口号
将端口转发到许多不同的服务器，
您可能不希望任何特定服务器的主机密
钥缓存在该本地端口号下。 （对于后一种情况，
您可以改为在相关
会话中显式配置主机密钥；请参阅 \k{config-ssh-kex-manual-hostkeys}。)

如果您只是为此选项输入一个主机名，
PuTTY 将在该主机的默认 SSH 端口下缓存 SSH 主机密钥，
而不管您真正连接到的端口是什么（因为典型的场景类似于上面的
示例：您连接到一个愚蠢的真实端口号，您的连接最终
被转发到其他机器的普通端口 22 SSH 服务器）。
要覆盖它，您可以将端口号附加到逻辑主机名，
用冒号分隔。例如。输入\cq{foovax:2200}作为逻辑
主机名将导致主机密钥被缓存，
就好像您已连接到 \c{foovax} 的端口 2200。

如果您使用此选项提供主机名，
它还会显示在包含远程主机名的其他位置，
例如默认窗口标题和默认 SSH
密码提示。
这反映了这是您\e{真正}连接到的主机这一事实，
这比您碰巧用来联系该主机的方式更重要。
（即使您使用的是 SSH 以外的协议，这也适用。）

\H{config-data} 数据面板

数据面板允许您配置可以发送
到服务器以影响远端连接的各种数据。

此面板上的每个选项都适用于多个协议。
 仅适用于一种协议的选项出
 现在该协议的配置面板上。

\S{config-username} \q{\ii{自动登录用户名}}

所有三种 SSH、Telnet 和 Rlogin 协议
都允许您指定要登录的用户名，
而无需每次都明确键入。 （某些 Telnet 服务器不支持此功能。）

在此框中，您可以键入该用户名。

\S{config-username-from-env} 系统用户名的使用

当上一个框 (\k{config-username})留空，
默认情况下，PuTTY 将在您建立连接时提示输入用户名。

在某些环境中，例如实现\i{单一登录}的大型组织的网络，
更明智的默认设置可能是使用登录到本地操作系统的
用户名（如果有）；这对于\i{GSSAPI} 密钥交换
和用户身份验证特别有用
(请参阅 \k{config-ssh-auth-gssapi}
和 \k{config-ssh-gssapi-kex})。
此设置允许您更改默认行为。

为方便起见，当前系统用户名显示在对话框中。
不保存在配置中； 如果保存的会
话稍后被其他用户使用，则将使用该用户的名称

\S{config-termtype} \q{\ii{终端类型}字符串}

您可能使用 PuTTY 连接的大多数服务器都设
计为从许多不同类型的终端连接。
为了向每一个发送正确的\i{控制序列}，
服务器需要知道它正在处理什么类型的终端。
因此，SSH、Telnet 和 Rlogin 协议中的每一个都允许在描述终
端的连接下发送一个文本字符串。
在 \i{Unix} 服务器上，
这会从 i\c{termcap} 或 \i\c{terminfo} 数据库中选择一个条目，
告诉应用程序将哪些控制序列发送到终端，
以及期望\i{键盘}生成哪些字符序列。

PuTTY 尝试模拟 Unix \i\c{xterm} 程序，
默认情况下它通过将 \c{xterm} 作为终端类型
字符串发送来反映这一点。
如果你发现这不是你想要的——也许远程系统报
告\q{未知终端类型}——你可以尝试将它设置为不同的东西，例如 \i\c{vt220}。

如果您不确定问题是否是
由终端类型设置引起的，
您可能需要查阅您的应用程序或服务器的手册。

\S{config-termspeed} \q{\ii{终端速度}}

Telnet、Rlogin 和 SSH 协议允许客户
端指定服务器的终端速度。

该参数\e{不}影响连接的实际速度，
始终\q{尽可能快}； 这只是服务器
软件有时用来修改其行为的提示。
例如，如果指示速度较慢，则服务器
可能会切换到\i{带宽}消耗较少的显示模式。

该值在网络环境中通常没有意义，
但 PuTTY 允许您对其进行配置，
以防您发现服务器对默认值反应不佳。

格式是一对用逗号分隔的数字，
例如 \c{38400,38400}。 第一个数字表示输出速度（\e{来自}服务器），
以比特/秒为单位，
第二个数字是输入速度（\e{到}服务器）。
（只有第一个用于 Rlogin 协议。）

此选项对Raw连接没有影响。

\S{config-environ} 在服务器上设置\i{环境变量}

Telnet 协议为客户端提供了一种将环境变量传递给服务器的方法。
由于安全漏洞，许多 Telnet 服务器已停止支持此功能，
但 PuTTY 仍然支持它，
以帮助任何找到其他方
法解决安全问题的服务器，
而不仅仅是禁用整个机制。

SSH 协议的第 2 版也提供了类似的机制，
在没有安全漏洞的情况下更容易实现。
较旧的 \i{SSH-2} 服务器更有可能支持它。

此配置数据不用
于 SSH-1、rlogin 或原始协议。

要将环境变量添加到通过连接传输的列表中，
请在\q{变量}框中输入变量名称，
在\q{值}框中输入其值，然后按\q{添加}按钮。
要从列表中删除一个，
请在列表框中选择它并按\q{删除}。

\H{config-proxy} 代理面板

\ii{代理}面板允许您将 PuTTY 配置为使用各种类型的代
理来建立其网络连接。 此面板中的设置会影响
形成 PuTTY 会话的主要网络连接，
以及由于 SSH \i{端口转发}而建立的任何额外连接
(请参阅 \k{using-port-forwarding})。

请注意，与某些软件（例如 Web 浏览器）不同，
PuTTY 不会尝试自动确定是否使用
代理以及（如果是）将哪个代理用于给定目标。
如果您需要使用代理，则必须始终明确配置。

\S{config-proxy-type} 设置代理类型

\q{代理类型}下拉列表允许您配置希
望PuTTY用于其网络连接的代理类型。
默认设置为\q{无代理};在此模式下，
不对任何连接使用代理。

\b 选择\I{HTTP proxy}\q{HTTP连接}允许您通
过支持 HTTP 连接命令的 Web 服务器代理连接，
如 \W{https://www.rfc-editor.org/rfc/rfc2817}{RFC 2817} 中所述。

\b 选择\q{SOCKS 4}或\q{SOCKS 5}允许
您通过 \i{SOCKS 服务器}代理您的连接。

\b 许多防火墙实现了一种不太正式的代理类型，
其中用户可以直接与防火墙机器建立 Telnet 连
接并输入诸如 \c{connect myhost.com 22} 之
类的命令以连接到外部主机。
选择\I{Telnet proxy}\q{Telnet}允许您告诉 PuTTY 使用这种类型的代理。
详细请参阅 \k{config-proxy-command}。

\b 有几种方法可以将 SSH 服务器用作代理。
所有这些都会导致PuTTY与代理主
机（在此上下文中有时称为\q{\i{跳转主机}}）建立辅助SSH连接。

\lcont{
\q{代理主机名} 字段将被解释为 PuTTY 保存的会话的名称
（如果存在），或者主机名（如果不存在）。
 如果引用的已保存会话本身配置为使用 SSH 代理，
 则这允许多跳跳转路径；
 它允许结合 SSH 和非 SSH 代理。

\b \q{SSH代理 + 端口转发}会导致 PuTTY 使用
辅助 SSH 连接打开到最终目标主机
的端口转发通道（类似于 OpenSSH 的 \cw{-J} 选项）。

\b \q{SSH代理 + 执行命令}导致PuTTY在
代理SSH服务器上
运行任意远程命令，并使用该命
令的标准输入和输出流来运行主连接。
远程命令行的指定如 \k{config-proxy-command} 所述。

\b “SSH代理 + 调用子系统”是类似的， 但会导致PuTTY
启动SSH\q{\i{子系统}}而不是普通的命令行。
这对于专门设置的 SSH 代理服务器可能很有用。
}

\b 选择\I{Local proxy}\q{本地}允许您在
本地计算机上指定任意命令以充当代理。
当会话启动时，PuTTY 不会创建 TCP 连接，
而是运行命令 (请参阅 \k{config-proxy-command})并
使用其标准输入和输出流。

\lcont{
例如，这可以用于与 PuTTY 本身不支持的
某种网络代理进行通信； 或者您可以
完全通过 TCP/IP 以外的方式建立连接。

您也可以在命令行启用此模式；
请参阅 \k{using-cmdline-proxycmd}。
}

\S{config-proxy-exclude} 从代理中排除部分网络

通常，您只需要使用代理连接到
网络的非本地部分； 例如，
公司内部网络外部的连接可能需要您的代理。
在\q{排除主机/IP}框中，
您可以输入 IP 地址范围或 DNS 名称范围，PuTTY
将避免使用代理并改为直接连接。

\q{排除主机/IP}框可能包含多个排除范围，
以逗号分隔。 每个范围可以是 IP 地址
或 DNS 名称，其中 \c{*} 字符允许使用通配符。 例如：

\c *.example.com

这会将名称以 \c{.example.com}
结尾的任何主机排除在代理之外。

\c 192.168.88.*

这会将 IP 地址以 192.168.88 开
头的任何主机排除在代理之外

\c 192.168.88.*,*.example.com

这一次排除了上述两个范围。

到本地主机（主机名 \i\c{localhost} 和任何\i{环回IP地址}）
的连接永远不会被代理，即使代理排除列表没有明确包含它们。
这种行为不太可能导致问题，
但如果确实如此，
您可以通过启用\q{考虑代理本地主机连接}来更改它。

请注意，如果您在\I{proxy DNS}代理上进行
DNS (请参阅 \k{config-proxy-dns})，您应该确保您的代
理排除设置不依赖于知道主机的 IP 地址。
如果名称在没有 PuTTY 查找的情况下传递给代理，
它永远不会知道 IP 地址，
也无法根据您的列表检查它。

\S{config-proxy-dns} 使用代理时的DNS\I{proxy DNS}\ii{域名解析}

如果您使用代理访问专用网络，
\i{DNS} 名称解析是由 PuTTY 本身（在客户端计算机上）执
行还是由代理执行可能会有所不同。

\q{在代理端进行 DNS 名称查找}配置选项允许您对此进行控制。
如果您将其设置为\q{否}，PuTTY 将始终执行自己的 DNS，
并将始终将 IP 地址传递给代理。
如果您将其设置为\q{是}，PuTTY 将始终将主机名直接传递给代理，
而无需先尝试查找它们。

如果您将此选项设置为\q{自动}（默认），
PuTTY 将执行它认为适合每种代理类型的操作。
大多数类型的代理（HTTP、SOCK5、SSH、Telnet 和本地）将主机名直接传
递给它们； SOCKS4 代理不会

请注意，如果您在代理上进行 DNS，
则应确保您的代理排除设置(请参阅 \k{config-proxy-exclude})
不要依赖于知道主机的 IP 地址。
如果名称在没有 PuTTY 查找的情况下传递给代理，
它永远不会知道 IP 地址，也无法根据您的列表检查它。

原始的 SOCKS 4 协议不支持代理端 DNS。
有一个协议扩展（SOCKS 4A）确实支持它，
但并非所有 SOCKS 4 服务器都提供此扩展。
如果您启用代理 DNS 并且您的 SOCKS 4 服务器无法处理它，这可能就是原因。

如果您想避免 PuTTY 进行与您的目标主机名相
关的\e{任何} DNS 查询（例如，因为您的本地 DNS 解
析器在这种情况下返回否定响应的速度非常慢），
然后将此控件设置为\q{是}， 您可能还需要在
SSH 中关闭 GSSAPI 身份验证和 GSSAPI 密钥交换
(请参阅 \k{config-ssh-auth-gssapi} 和
 \k{config-ssh-gssapi-kex} )。这是
 因为 GSSAPI 设置还涉及对目标主机名的 DNS 查询，
 并且该查询由单独的 GSSAPI 库执行，因此 PuTTY 无法覆盖或重新配置它。

\S{config-proxy-auth} \I{proxy username}用户名和\I{proxy password}密码

如果您的代理需要身份验证，
您可以在\q{用户名}和\q{密码}框中
输入用户名和密码\I{proxy authentication}authentication。

\I{security hazard}请注意，
如果您保存会话，代理密码将以纯文本形式保存，
因此任何可以访问您的 PuTTY 配置数据的人都可以发现它。

如果PuTTY发现它需要代理用户名或密码，
而您尚未在此处指定，P
uTTY将在对话中以交互方式提示输入终端窗口。

并非所有形式的代理都完全支持身份验证：

\b HTTP 代理和 SOCKS 5 代理
支持用户名和密码身份验证。

\lcont{

\b 使用 SOCKS 5，如果代理支持，
则通过 \i{CHAP} 进行身份验证（\i{PuTTYtel} 不支持）；
否则\I{plaintext password}密码以纯文本形式发送到代理。

\b 使用 HTTP 代理，如果可能的话，
身份验证是通过\q{\i{HTTP Digest}}（同样，PuTTYtel 不支持）
或\q{\i{HTTP Basic}}。 在后一种情况下，\I{plaintext
password}密码以纯文本形式发送到代理。

}

\b SOCKS 4 可以使用\q{用户名}字段，
但不支持密码。

\b SSH 代理可以将 PuTTY 支持的所有相同形式的 SSH 身
份验证用于其主连接。
如果 SSH 服务器请求密码验证，
将使用配置的代理密码，
但会先尝试其他验证方法，
例如公钥，
就像 SSH 连接一样。

\b 您可以指定在Telnet/Local proxy命令
（请参阅 \k{config-proxy-command}）。
如果你这样做了，不要在配置代理时，
设置用户名或密码，PuTTY将以交互方式提示输入它们。

\S{config-proxy-command} 指定Telnet、SSH或本地代理命令

如果您使用的是 \i{Telnet 代理}类型，
则防火墙的 Telnet 服务器所需的常用命令是\c{connect}，
后跟主机名和端口号。如果您的代理需要其他命令，
您可以在\q{要发送到代理的命令}框中输入替代命令。

如果您使用的是\i{本地代理}类型，
则在此处指定要运行的本地命令。

如果使用\q{SSH代理 + 执行命令}类型，
则在此处指定要在 SSH 代理服务器上运行的命令。
同样，如果使用\q{SSH代理 + 调用子系统}，
则子系统名称将按此处指定的方式构造。

在此字符串中，
可以使用 \c{\\n} 表示换行符，
\c{\\r} 表示回车符，\c{\\t} 表示制表符，
\c{\\x} 后跟两个十六进制数字表示任何其他字符。
\c{\\\\}用于对 \c{\\}字符本身进行编码。

此外，特殊字符串 \c{%host} 和 \c{%port} 将替换
为要连接到的主机名和端口号。对于 Telnet 和本地
代理类型，字符串 \c{%user} 和 \c{%pass} 将替换为代理
用户名和密码（如果未在配置中指定，
系统将提示输入）– SSH 代理
类型不会发生这种情况（因为代理用户名/密码用于 SSH 身份验证）。
字符串 \c{%proxyhost} 和 \c{%proxyport} 将被替换为\e{代理}面
板上指定的主机详细信息（如果有）
（这对于使用本地或远程命令的代理类型最有可能有用）。
若要获取文字 \c{%} 符号，请输入 \c{%%}。

如果 Telnet 代理服务器在发送命令之前提示输
入用户名和密码，您可以使用如下命令：

\c %user\n%pass\nconnect %host %port\n

这会将您的用户名和密码作为前两行发送到代理，
然后是连接到所需主机和端口的命令。
请注意，如果您未在 Telnet 命令
中包含 \c{%user} 或 \c{%pass} 令牌，则\q{用户名}
和\q{密码}配置字段将被忽略。

\S{config-proxy-logging} 控制\i{代理日志}记录

通常代理交互有自己的诊断输出；
对于本地代理命令尤其如此。

设置\q{在终端窗口中打印代理诊断}可让您控
制将多少代理诊断信息打印到主终端窗口，
以及主会话的输出。

默认情况下(\q{否})，代理诊断仅发送到事件日志；
如果选择\q{是}，它们也会打印到终端，
在那里它们可能会与您的主会话混淆。
\q{仅在会议开始之前}是一种妥协； 代理消息将进入终端窗口，
直到主会话被认为已经开始（以协议相关的方式），
这是它们最有可能引起关注的时候； 会话期间任何其他与代理相
关的消息都只会转到事件日志。

\H{config-ssh} SSH 面板

\i{SSH} 面板允许您配置仅
适用于 SSH 会话的选项。

\S{config-command} 在服务器上执行特定命令

在 SSH 中，您不必在服务器上运行
常规 shell 会话。 相反，您可以选择运行单个特
定命令（例如邮件用户代理）。 如果要执行此操作，
请在\q{\ii{远程命令}}框中输入命令。

请注意，大多数服务器会在执行
命令后关闭会话。

\S{config-ssh-noshell} \q{不启动\I{remote shell}shell或命令
\I{remote command}}

如果勾选此框，PuTTY 将不会在连接到远程
服务器后尝试运行 shell 或命令。
如果您仅使用 SSH 连接进行\i{端口转发}，
并且您在服务器上的用户帐户没有运行 shell 的能力，
则可能需要使用此选项。

此功能仅在 \i{SSH协议版本2}
中可用（因为版本 1 协议假定您将始终想要运行 shell）。

也可以使用 \c{-N} 命令行选项启用此功能；
请参阅 \k{using-cmdline-noshell}。

如果您在 Plink 中使用此功能，
您将无法通过任何优雅的方式终止 Plink 进程；
杀死它的唯一方法是按 Control-C 或
从另一个程序发送终止信号。

\S{config-ssh-comp} \q{启用\i{压缩}}

这样就可以在 SSH 连接中进行数据压缩：服务器
发送的数据在发送前被压缩，在客户端被解压。
同样，PuTTY 发送到服务器的数据首先被压缩，
服务器在另一端解压。
这有助于充分利用低\i{带宽}连接。

\S{config-ssh-prot} \q{\i{SSH 协议版本}}

这允许您选择是使用 \i{SSH protocol version 2} 还是
旧的\I{SSH-1}version 1。

您通常应该将其保留为默认值\q{2}。
除了功能较少外，旧的 SSH-1 协议不再开发，具有许多已知的加密弱点，
并且通常不被认为是安全的。
PuTTY 的协议 1 实现主要是为了兼容性而提供的，
不再进行增强。

如果服务器同时提供两种版本，则首选\q{2}。
如果您有一些只使用 SSH-1 的服务器或设备，
请在此处选择\q{1}，并且不要将生成的连接视为安全的。

如果服务器与您在此处的选择不匹配，
PuTTY 不会自动回退到协议的其他版本； 相反，
它会显示一条错误消息并中止连接。
这可以防止主动攻击者将
预期的 SSH-2 连接降级为 SSH-1。

\S{config-ssh-sharing} PuTTY 工具之间共享 SSH 连接

此框中的控件允许您将 PuTTY 配置
为尽可能重用现有的 SSH 连接。

SSH-2 协议允许您在同一个 SSH 连接上运行多
个数据通道，因此您只需登录一次（并且
只需进行一次昂贵的加密设置），
然后打开多个终端窗口。

每个 PuTTY 实例仍然最多可以运行一个
终端会话，但是使用此框中的控件，
您可以配置 PuTTY 以检查其自身的另一个实例是否已
经连接到目标主机，如果是，
则共享该实例的 SSH 连接开始一个单独的新的。

要启用此功能，只需勾选“如果可能，
共享SSH连接”框。然后，
每当您启动连接到特定主机的 PuTTY 会话时，
它将尝试重用现有的 SSH 连接（如果可用）。
例如，从系统菜单中选择\q{复制会话}将在同一
主机上启动另一个会话，如果启用共享，则它将重用现有的 SSH 连接。

使用此模式时，连接到给定服务
器的第一个 PuTTY 成为\q{上游}，
这意味着它是管理真正 SSH 连接的那个。
所有后续重用连接的 PuTTY 都称为\q{下游}：
它们根本不连接到真实服务器，
而是通过本地进程间通信方法连接到上游 PuTTY。

要激活此系统，PuTTY 的上游和下游
实例\e{都}必须启用共享选项。

因此，上游 PuTTY 在其所有下游都关闭
之前无法终止。这类似于您使用端口
转发或 X11 转发获得的效果，
其中终端会话已经完成的 PuTTY 仍将保持打开状态，
以便继续为转发的连接提供服务。

如果您需要更详细地配置此系统，
还有两个额外的复选框可让您指定特定的 PuTTY 是否可以充
当上游或下游或两者兼而有之。
（这些框只有在主 \q{如果可能，共享SSH连接}框也
被勾选时才会生效。）
默认情况下，这两个框都被勾选，
因此从相同配置启动的多个 PuTTY 将
指定它们自己作为上游并共享单一连接；
但是如果由于某种原因您需要特定的 PuTTY 配置\e{不}是上游
（例如，因为您肯定需要它立即关闭）或不是
下游（例如，因为它需要使用特殊的私钥进行自己的身份验证），
那么您可以取消选中其中一个或另一个。

我在上面的讨论中提到了\q{PuTTY}，
但所有其他建立 SSH 连接的 PuTTY 工具也
可以使用这种机制。例如，如果 PSCP 或
 PSFTP 加载启用共享的配置，
则它可以充当下游并使用由 GUI PuTTY 实例设置的现有 SSH 连接。
一种特殊情况是 PSCP 和 PSFTP 永远不会充当上游。

可以使用 Plink 以编程方式测试是否存在实时上游。
请参阅  \k{plink-option-shareexists}。

\H{config-ssh-kex} 密钥交换面板

密钥面板（Kex是 \q{\i{key exchange}}—密钥交换的缩写）
允许您配置与 SSH-2 密钥交换相关的选项。

密钥交换发生在 SSH 连接开始时（偶尔之后）；
它建立了一个\i{共享密钥}，
用作所有 SSH 安全功能的基础。
因此，密钥交换的安全性对于
连接的安全性非常重要。

密钥交换是一个加密密集型过程；
如果客户端或服务器是相对较慢的机器，
较慢的方法可能需要几十秒才能完成。

如果连接启动太慢，或者连接定期挂起，
您可能需要尝试更改这些设置。

如果您不明白其中的任何含义，
可以放心地保留这些设置。

整个面板仅与 SSH 协议版本 2 相关；
这些设置都不会影响 SSH-1。

\S{config-ssh-kex-order} \ii{密钥交换算法}选择

PuTTY 支持多种 SSH-2 密钥交换方式，
并允许您选择您喜欢使用的一种；
配置类似于密码选择 (请参阅 \k{config-ssh-encryption})。

PuTTY 目前支持以下密钥交换方式：

\b \q{NTRU Prime / Curve25519 hybrid}: \q{\i{Streamlined NTRU Prime}}
是一种基于网格的算法，旨在抵抗\i{量子攻击}。
在这种密钥交换方法中，它与传统的
Curve25519-based方法（\q{ECDH}中包含的方法之一）并列显示，
它的安全性不应\e{低于}通常使用的方法，
并且也有希望抵抗新的攻击类别。。

\b \q{ML-KEM / Curve25519 hybrid} and \q{ML-KEM NIST ECDH hybrid}:
类似的混合结构的 \i{ML-KEM},是另一种基于网格的
密钥交换方法旨在 \i{quantum-resistant}. 前者,
ML-KEM 是与 Curve25519 的混合算法; 后者, 与 NIST P384
或者 P256 的混合算法..

\b \q{\i{ECDH}}: elliptic curve Diffie-Hellman key exchange,
包含有各种标准曲线和哈希算法。

\b The original form of \i{Diffie-Hellman key exchange}，包含
有各种知名的分组和哈希：

\lcont{
\b \q{Group 18}，8192-bit group，
与 SHA-512 hash function 一起使用。

\b \q{Group 17}，6144-bit group，
与 SHA-512 hash function 一起使用。

\b \q{Group 16}，4096-bit group，
与 SHA-512 hash function 一起使用。

\b \q{Group 15}，3072-bit group，
与 SHA-512 hash function 一起使用。

\b \q{Group 14}：2048-bit group，与 SHA-256 hash function 一起使用，
如果服务器不支持，则使用SHA-1。

\b \q{Group 1}:  1024-bit group,
与 SHA-1 hash function 一起使用。
我们和当前的SSH标准都不建议使用此方法，
并且默认情况下不会在新安装中使用它;
但是，它可能是非常旧的服务器软件支持的唯一方法。
}

\b \q{Diffie-Hellman \i{group exchange}}: 使用这种方法，
PuTTY请求服务器建议一个组用于后续的Diffie-Hellman密钥交换，
而不是使用固定组;服务器可以避免已知较弱的组，
并可能随着时间的推移发明新的组，
而无需对PuTTY的配置进行任何更改。
此密钥交换方法使用 SHA-256 哈希，
如果服务器不支持，则使用 SHA-1。

\b \q{\i{RSA-based key exchange}}: 与Diffie-Hellman密钥交换相比，
这需要客户端的计算工作量少得多，
而服务器方面的计算工作量也要少得多。

\b \q{GSSAPI key exchange}：请参阅 \k{config-ssh-gssapi-kex}。

如果 PuTTY 找到的第一个算法低于\q{-- 以下为警告选项 --}行，
你会在建立连接时看到一个警告框，
类似于密码选择(请参阅 \k{config-ssh-encryption})。

\S2{config-ssh-gssapi-kex} 基于GSSAPI的密钥交换

PuTTY 支持一组密钥交换方法，这些方法还包含基
于 GSSAPI 的身份验证。
它们通过\q{尝试 GSSAPI 密钥交换}复选
框（也出现在\q{GSSAPI}面板上）启用。

PuTTY 在使用 Kerberos V5 时只能执行 GSSAPI 认证的密钥交换方法，
而不能执行其他 GSSAPI 机制。
如果运行 PuTTY 的用户具有当前的 Kerberos V5 凭据，
则 PuTTY 将优先选择 GSSAPI 密钥交换方法，
而不是首选列表中配置的任何普通 SSH 密钥交换方法。
\k{config-ssh-kex-order}章节中列出的大多数普通方法与GSSAPI等效;
服务器支持决定了哪一个将被使用。
（PuTTY对GSSAPI 身份验证的密钥交换方法
顺序是固定的，不受首选项列表的控制。）

当您使用凭证委托时，
将 GSSAPI 身份验证作为 SSH 密钥交换
的一部分的优势显而易见 (请参阅 \k{config-ssh-auth-gssapi-delegation})。
SSH 密钥交换可以在会话稍后重复，
这允许您的 Kerberos V5 凭据（通常是短暂的）在客户端上刷新
时自动重新委托给服务器。
（此功能通常称为\q{\i{级联凭据}}。）

如果您的服务器不支持 GSSAPI 密钥交换，
则在 SSH 用户身份验证阶段它可能仍支持 GSSAPI。
这仍然允许您使用 Kerberos 凭据登录，
但只允许您委派会话开始时处于活动状态的凭据;
它们不能在以后长时间运行的会话中自动刷新。
请参阅 \k{config-ssh-auth-gssapi} 了解
如何在PuTTY控制 GSSAPI 用户身份验证。

GSSAPI 密钥交换的另一个作用是它取代了描述的永
久主机密钥的通常 SSH 机制，请参阅 \k{gs-hostkey}。
因此，如果您使用这种方法，那么您将不会被询问
任何有关是否接受服务器的主机密钥的交互式问题。
相反，Kerberos 交换将验证您连接到的主机的身份，
同时验证您的身份。

\S{config-ssh-kex-rekey} \ii{密钥重复交换}

如果连接启动时协商的会话密钥使用过多或时间过长，
则对 SSH 连接进行攻击可能变得可行。
因此，SSH-2 协议规定应该每
隔一段时间进行一次新的密钥交换；
这可以由客户端或服务器发起。

在进行重新协商时，没有数据可以通过 SSH 连接，
因此它可能看起来\q{冻结}。
（在事件日志中记录了重复密钥交换的发生；
请参阅 \k{using-eventlog}。)
通常在连接开始时使用相同的算法，但开销相似。

这些选项控制 PuTTY 启动重复密钥交换（\q{rekey}）的
频率。 您还可以随时从“特殊命令”菜单
强制交换密钥(请参阅 \k{using-specials})。

\# FIXME: do we have any additions to the SSH-2 specs' advice on
these values? Do we want to enforce any limits?

\b \q{密钥有效性分钟时长} 指定在开始重新交换密钥之
前允许经过的时间量。 如果将其设置为零，
PuTTY 将不会因为经过时间而重新输入密钥。
SSH-2 协议规范建议超时时间最多为 60 分钟

您可能需要完全禁用基于时间的重新交换密钥，
\i{keepalives}并不总是出于有用的原因。
如果您预计在 SSH连接过程中会出现几个小时的网络中断，
但实际上并没有计划在这些时间内通过该连接发送数据，
那么在中断过程中尝试重新交换密
钥可能会导致连接中断。
如果禁用了重新交换密钥（rekeys），
则连接原则上连接应该存在（在没有干扰防火墙的情况下）。
更多信息请参阅 \k{config-keepalive}。
出于这些目的，rekeys 与 keepalives 具有许多相同的属性。
（除了 rekeys本身具有加密价值，
因此在决定是否关闭它们时应该牢记这一点。）
但是请注意，SSH \e{服务器}仍然可以启动 rekeys。

\b 如果您使用 GSSAPI 密钥交换，
则\q{GSSAPI 检测的间隔分钟}指定检查 GSSAPI 凭证缓存以查看新票证是否可用
于委派或当前票证即将到期的频率。
如果启用了 GSSAPI 凭据的转发，
PuTTY 将根据需要尝试重新生成密钥，
以防止委派的凭据过期。 建议经常检查；
仅在需要时才进行密钥更新。

\b \q{经过密钥的数据流量}指定在启动重
新加密之前允许在任一方向流
动的数据量（以字节为单位）。
如果将其设置为零，PuTTY 将不会
因传输数据而重新加密。 SSH-2 协议规范建议限制为最多 1 GB。

\lcont{

除了以字节为单位指定值外，
还可以使用以下速记：

\b \cq{1k} 指定 1 kilobyte (1024 bytes).

\b \cq{1M} 指定 1 megabyte (1024 kilobytes).

\b \cq{1G} 指定 1 gigabyte (1024 megabytes).

}

完全禁用基于数据的密钥更新是一个坏主意。
SSH-2 协议的\i{完整性}以及在较小程度上
的\i{机密性}部分取决于在 32 位数据包
序列号围绕之前发生的密钥更新。 与基于时间的密钥更新不同，
基于数据的密钥更新不会在 SSH 连接空闲时发生，因此它们不会
导致同样的问题。 顺便说一下，
SSH-1 协议的完整性保护甚至比没有密钥更新的 SSH-2 更弱。

\H{config-ssh-hostkey} 主机密钥面板

主机密钥面板允许您配置
与\i{主机密钥管理}相关的选项。

主机密钥用于证明服务器的身份，
并确保服务器没有被欺骗（通过中间人攻击或
在网络上完全替换它）。
请参阅 \k{gs-hostkey} 有关主机密钥的基本介绍。

该面板的大部分内容仅与 SSH 协议版本 2 相
关； SSH-1 仅支持一种类型的主机密钥。

\S{config-ssh-hostkey-order} \ii{主机密钥类型}设置

PuTTY 支持多种 SSH-2 主机密钥类型，
并允许您选择您喜欢使用哪一种来识别服务器。
配置类似于密码选择
(请参阅 \k{config-ssh-encryption})。

PuTTY 目前支持以下主机密钥类型：

\b \q{\i{Ed25519}}: \I{EdDSA}Edwards-curve DSA using a twisted Edwards
curve with modulus \cw{2^255-19}.

\b \q{\i{Ed448}}: another \I{EdDSA}Edwards-curve DSA type, using a
larger elliptic curve with a 448-bit instead of 255-bit modulus (so it
has a higher security level than Ed25519).

\b \q{ECDSA}: \i{elliptic curve} \i{DSA} using one of the
\i{NIST}-standardised elliptic curves.

\b \q{DSA}: straightforward \i{DSA} using modular exponentiation.

\b \q{RSA}: the ordinary \i{RSA} algorithm.

如果 PuTTY 已经为服务器存储了一个或多个主机密钥，
默认情况下它会优先使用其中一个，
即使服务器具有优先顺序更高的密钥类型。 您可以使用\q{特殊命令}
菜单从现有会话中将此类密钥添加
到 PuTTY 的缓存中；请参阅 \k{using-specials}。

否则，PuTTY 将完全根据您在配
置中指定的首选项顺序选择密钥类型。

如果 PuTTY 找到的第一个密钥类型
低于\q{-- 以下为警告选项 --}行，则在建立连接时会看到一个警告框，
类似于密码选择(请参阅 \k{config-ssh-encryption})。

\S{config-ssh-prefer-known-hostkeys} 首选已知主机密钥

默认情况下，PuTTY 将调整 SSH-2 主机
密钥算法的优先顺序，
以便将它已知的任何主机密钥移到列表顶部。

这可以防止您必须检查和确认您已经拥有的
服务器的新主机密钥（例如，因为服务器
生成了在 PuTTY 的偏好顺序中更高类型的替代密钥，
或者因为您更改了偏好顺序本身）。

但是，另一方面，它可能会向网络中的
侦听器泄露有关您\e{是否}已经知道此
服务器的主机密钥的信息。

因此，此策略是可配置的。
通过关闭此复选框，您可以将 PuTTY 重置为始终使用
在首选项列表中配置的主机密钥算法的确切顺序，
参考 \k{config-ssh-hostkey-order}，
这样监听的人就不会发现您存储了哪些密钥。

\S{config-ssh-kex-manual-hostkeys} \ii{手动配置主机密钥}

在某些情况下，如果 PuTTY 的自动主机密钥
管理无法满足您的需要，您可能需要手动配
置 PuTTY 以接受特定主机密钥或一组特定主机密钥中的一个。

您可能想要这样做的一个原因是因为 PuTTY
连接到的主机名使用循环 DNS 来返回多个实际服务
器之一，并且它们都有不同的主机密钥。
在这种情况下，您可能需要将 PuTTY 配置为接受可
能服务器的任何主机密钥列表，
同时仍拒绝不在该列表中的任何密钥。

另一个原因是如果 PuTTY 的自动主机密钥管理完全不可用，
例如 因为 PuTTY（或 Plink 或 PSFTP 等）
在 Windows 环境中运行，
无法访问注册表。
在这种情况下，您可能需要使用 \cw{-hostkey} 命令行选项来配置预期的主机密钥；
请参阅 \k{using-cmdline-hostkey}。

的自动主机密钥管理只是选择错误的
主机名来存储密钥的情况，
您可能需要考虑设置一个\q{逻辑主机名}；
请参阅 \k{config-loghost}。

要通过 GUI 配置手动主机密钥，
请在\q{为此连接手动配置主机密钥}的编辑框
中输入一些描述主机密钥的文本，
然后按\q{添加}按钮。 该文本将出现在\q{要接受的主机密钥或指纹}列表框中。
您可以使用\q{清除}按钮再次删除密钥。

描述主机密钥的文本可以是以下格式之一：

\b PuTTY 的事件日志和主机密钥对话框中
显示的表单的基于 \I{SHA256 fingerprint}SHA-256 的主机密钥指纹，
即\cq{SHA256:}后跟 43 个区分大小写的字符。

\b 一个基于 \I{MD5 fingerprint}MD5 的主机密钥指纹，
即 16 个用冒号分隔的 2 位十六进制数字，
前面可选前缀\cq{MD5:}。 （字符的大小写无关紧要。）

\b 一个 base64 编码的 blob，以 OpenSSH 的
单行公钥格式描述 SSH-2 公钥。 如何获取这种格式的
公钥取决于服务器； 在 OpenSSH 服务器上，
它通常可以在 \c{/etc/ssh/ssh_host_rsa_key.pub} 之类的位置找到。

如果在 PuTTY 建立 SSH 连接时此框包含至少一个主机密钥或指纹，
则完全绕过 PuTTY 的自动主机密钥管理：
当且仅当服务器
提供的主机密钥是在此框中列出的密钥之一时，
才允许连接，注册表中的\I{host key cache}主机密钥将不会被读取或写入，
除非您明确这样做。

如果该框为空（通常是），则 PuTTY 的
自动主机密钥管理将正常工作。

\S{config-ssh-kex-cert} 配置PuTTY以接受主机\i{证书}

在某些环境中，许多服务器的 SSH 主机密钥都将依次由中
央\q{证书颁发机构}（简称\q{CA}）进行签名。
这简化了用户的主机密钥配置，
因为如果他们将其 SSH 客户端配置
为接受由该 CA 认证的主机密钥，
则他们不需要在首次连接到该服务器时单独确认每个主机密钥。

为此，请按\q{主机密钥}配置面
板中的\q{配置主机CAs}按钮。
这将启动一个辅助配置对话框，
您可以在其中配置 PuTTY 将接受来自哪些 CA 的签名。

\s{此配置适用于所有已保存的会话。} 主配置中的所有内容都
特定于一个保存的会话，
您可以准备一个单独的会话，
所有配置都不同。
但是，\s{主机 CA 配置的有且只有一个副本，
它适用于 PuTTY 运行的所有会话，无论是否保存。}

（否则，这将是无用的——为每个
主机手动配置新CA不会比为每个主机设置
新的主机密钥并按下\q{确认}按钮更方便。）

要使用此配置框设置新的 CA，请执行以下操作：

首先，从文件加载 CA 的公钥，或将其直接粘贴
到\q{证书颁发机构的公钥}编辑框中。
如果您的组织以这种方式对其主机密钥进行签名，
他们将发布其 CA 的公钥，
以便 SSH 用户可以将其包含在其配置中。

接下来，在\q{信任此密钥进行认证的有效主机}框中，
配置至少一个主机名通配符，以说明 PuTTY 应信任此 CA 代表的服务器。
例如，假设您为示例公司（\cw{example.com}）工作，
并且示例公司 IT 部门播发了一个对所有示例内
部计算机的主机密钥进行签名的 CA。
然后，您可能希望信任该 CA 为域中的计算
机 \cw{example.com} 的主机密钥签名，
但不能为其他任何内容签名。
因此，您可以在\q{有效主机}框中输入\cq{*.example.com}。

\s{限制允许 CA 密钥签名的内容非常重要。} 不要只
是在该框中输入\cq{*}！如果您这样做，
您就是说示例公司IT部门有权为您可能
决定连接的\e{任何内容}签署主机密钥 - 即使您
从公司网络连接到其他地方的计算机，
例如您自己的个人服务器。
因此，该配置将使示例IT部门能够充当PuTTY进
程和服务器之间的\q{中间人}，
并监听您的通信 - 这正是SSH应该避免的事情。

因此，如果 CA 是由负责 \cw{example.com}（或其他）的
系统管理员提供给您的，请确保 PuTTY \e{仅}信
任 \cw{example.com} 域中的计算机。

有关\q{有效主机}表达式的完整语法，
请参阅 \k{config-ssh-cert-valid-expr}。

最后，为此 CA 选择一个标识名称;
在窗口顶部的\q{此 CA 的名称}编辑框中输入该名称，
然后按\q{保存}以在配置中记录 CA。
您选择的名称将显示在\q{保存}按钮
左侧的已保存CA列表中。

标识名称可以是您喜欢的任何名称。它就在那里，
因此，如果您存储多个证书，则可以在以后要编
辑或删除它们时分辨出哪个证书是哪个证书。
当服务器提供由该 CA 签名的证书时，它还会出现在 PuTTY 事件日志中。

要重新加载现有 CA 配置，请在列表框中选择它，
然后按\q{加载}。然后，您可以进行更改，然后再次保存。

要从配置中完全删除 CA，请在列表
中选择该 CA，然后按\q{删除}。

\S2{config-ssh-cert-valid-expr} 您可以在\q{有效主机}中
输入的表达式

您可以在\q{信任此密钥并进行认证的有效主机}
编辑框中输入最简单内容，仅使用主机名通配符。
例如\cq{*.example.com}，这将匹配该域中的任何主机。
因此，这同时匹配 \cq{ssh.example.com} 和 \cq{login.dept.example.com}
但与 \cq{prod.example.net} 不匹配。

同时您也可以输入多个主机名通配符，以及端口号范围，
并使用运算符 \cq{&&} 表示 \q{and}，
\cq{||} 表示 \q{or}，\cq{!} 表示 \q{not}
和括号来从中生成复杂的布尔表达式。

例如，您可以输入以下一些其他内容。

\b \cq{*.foo.example.com || *.bar.example.com}。这意味着，
如果主机名与\q{*.foo.example.com}\e{或}\q{*.bar.example.com}匹配，
则 CA 受信任对连接的主机密钥进行签名。
换句话说，CA对 \cw{example.com} 的这
两个特定子域具有权限，
但对其他任何东西（如 \cw{www.example.com}都无权。

\b \cq{*.example.com && ! *.extrasecure.example.com}。这意味着，
如果主机名与\q{*.example.com}匹配\e{但与}\q{*.extrasecure.example.com}不匹配，
则信任 CA 对连接的主机密钥进行签名。
（想象一下，如果您的
公司中有一组绝密服务器，
而主要IT部门没有安全许可来管理。）

\b \cq{*.example.com && port:22}。这意味着，
如果主机名与\q{*.example.com}匹配\e{且}端口号为 22，
则信任 CA 对连接的主机密钥进行签名。
在其他端口上运行的 SSH 服务器将不包括在内。

\b \cq{(*.foo.example.com || *.bar.example.com) && port:0-1023}。
这与以前一样匹配 \cw{example.com} 的两个子域，
但\e{也}将端口号限制在 0-1023 范围内。

证书配置表达式由一个或多个单独的要求组成，
每个要求都可以是主机名
通配符、单个端口号或端口号范围，
并与这些布尔运算符组合在一起。

与C等其他语言不同，
\cq{&&}和\cq{||}之间没有隐含的优先级。
如果你写\cq{A && B || C}（其中\cw{A}，\cw{B}和\cw{C}是一些特定的要求），
然后PuTTY将报告语法错误，
因为您没有说出哪个\cq{&&}和\cq{||}紧紧地优先。
您必须编写\cq{(A && B) || C}，\q{意思是\cw{A}和\cw{B}，
或者只是\cw{C}}，或\cq{A && (B || C)}（\q{意思是\cw{A}，
以及\cw{B}和\cw{C}中的至少一个”}），以使其清晰。

\S2{config-ssh-cert-rsa-hash} 证书中的 RSA 签名类型

RSA 密钥可用于生成具有安全哈希函数的签名。
通常，任何足够新、足以支持证书的 OpenSSH 版本也将足够新，
可以避免使用 SHA-1，因此接受更现代的 SHA-256 和 SHA-512
的默认设置应该适用于几乎所有情况。
但是，为了完整起见，
您可以使用 RSA 密钥配置 PuTTY 明确接受
来自 CA 的证书中的哪些类型的 RSA 签名。

\H{config-ssh-encryption} 加密面板

PuTTY 支持多种不同的\i{加密算法}，
并允许您选择您喜欢使用的一种。
您可以通过在列表框中上下拖动算法
（或使用向上和向下按钮移动它们）来指定偏好顺序。
当您建立 SSH 连接时，PuTTY 将从顶部向下搜索列表，
直到找到服务器支持的算法，
然后使用该算法。

PuTTY 目前支持以下算法：

\b \i{ChaCha20-Poly1305}, a combined cipher and \i{MAC} (SSH-2 only)

\b \i{AES} (Rijndael) - 256, 192, or 128-bit SDCTR or CBC, or
256 or 128-bit GCM (SSH-2 only)

\b \i{Arcfour} (RC4) - 256 or 128-bit stream cipher (SSH-2 only)

\b \i{Blowfish} - 256-bit SDCTR (SSH-2 only) or 128-bit CBC

\b \ii{Triple-DES} - 168-bit SDCTR (SSH-2 only) or CBC

\b \ii{Single-DES} - 56-bit CBC (see below for SSH-2)

如果 PuTTY 找到的算法低于
\q{-- 以下为警告选项 --}行，则在建立连接时会看到一个警告框：

\c The first cipher supported by the server
\c is single-DES, which is below the configured
\c warning threshold.
\c Do you want to continue with this connection?

这警告您，第一个可用的加密不是非常安全的。
通常，您会在您认为安全的加密和您认为不合
标准的加密之间放
置\q{-- 以下为警告选项 --}。
默认情况下，PuTTY 提供一个偏好顺序，
旨在反映在安全性和速度方面的合理偏好。

在 SSH-2 中，加密算法是针对每个连接
方向独立协商的，
尽管 PuTTY 不支持单独配置优先顺序。
因此，您可能会收到两个类似于上述警告的警告，
可能使用不同的加密。

在 SSH-2 协议标准中不推荐使用 Single-DES，
但一两个服务器实现确实支持它。
如果您启用\q{在 SSH-2 启用传统使用Single-DES}选项，
PuTTY 可以使用Single-DES与这些服务器
进行互操作； 默认情况下，
这是禁用的，PuTTY 将坚持使用推荐的密码。

\H{config-ssh-auth} 认证面板

认证面板允许您为 SSH 会话
配置\i{身份验证}选项。

\S{config-ssh-banner} \q{显示预设认证标志}

SSH-2 服务器可以在用户登录之前向客户
端提供一条消息以显示给潜在用户；
这有时被称为预身份验证\q{\i{横幅}}。
通常，这用于提供有关服务器的信息和法律声明。

默认情况下，PuTTY 在提示输入密码或类似
凭据之前显示此消息（但遗憾的是，由于协议
设计的性质，不会在提示输入登录名之前显示此消息）。
通过取消选中此选项，
可以完全抑制横幅的显示。

\S{config-ssh-noauth} \q{完全绕过身份验证}

在 SSH-2 中，原则上可以在不使用 SSH 的机制
向服务器识别或证明你是谁的情况下建立连接。
例如，SSH 服务器可能更喜
欢在数据通道中处理身份认证，
或者根本不需要任何用户身份认证。

默认情况下，PuTTY 假定服务器需要身份认证
（我们从未听说过不需要身份认证的），
因此必须使用用户名启动此过程。 如果您发现您收到无法回答的用户名提示，
您可以尝试启用此选项。
但是，大多数 SSH 服务器会拒绝此操作。

如果您有用户名并且只想让 PuTTY 记住它，
这不是您想要的选项；请参阅 \k{config-username}。
如果您尝试设置无密码登录到主流 SSH 服务器，
也可能不是这样； 根据服务器，
您可能需要公钥身份验证(\k{pubkey})
或者可能是 GSSAPI 身份验证(\k{config-ssh-auth-gssapi})。
（这些仍然是身份验证形式，
即使您不必与它们交互。）

此选项仅影响 SSH-2 连接。
SSH-1 连接始终需要身份验证步骤。

\S{config-ssh-notrivialauth} \q{仅连接无密码或者密钥认证,
则断开连接}

如果服务器接受身份验证而从未要求
任何类型的密码或签名或令牌，
则此选项会导致 PuTTY 放弃 SSH 会话并与服务器断开连接。

这可以用作安全措施。
有一些针对 SSH 客户端用户的攻击形式，
它们通过提前终止 SSH 身份验证阶段来工作，
然后在 SSH 会话的主要部分做一些事情，
这\e{看起来}像是身份验证的一部分，但实际上并非如此。

例如，不是要求您的公钥签名
（PuTTY 会要求您提供密钥的密码），
受感染或恶意服务器可能允许您在没
有签名或密码的情况下登录，
然后打印一条\e{模仿} PuTTY 的消息请求您的密码，
希望您输入它。
（事实上，您的公钥的密码不应该发送到任何服务器。）

PuTTY 对此类攻击的主要防御是\q{信任标记}系
统：PuTTY 窗口中真正由 PuTTY 本身发起的消息显
示在 PuTTY 图标的小副本旁边，
服务器在尝试模仿时无法伪造
使用终端输出相同的消息。

但是，如果您认为无论如何您都可能面临这种风
险（如果您没有密切注意信任标志，或者如果
您认为您的某个服务器存在恶意的额外风险），
那么您可以启用此选项作为额外的防御。
然后，如果服务器尝试任何涉及让您通过
身份验证阶段的攻击，PuTTY 将在发送后续虚假提示或其他类型的
攻击之前断开与服务器的连接。

另一方面，一些服务器\e{合法}地让您轻松通过 SSH 身份验证阶段，
要么是因为它们是真正公开的，要么是因为重要的身
份验证步骤发生在终端会话期间。
（一个示例可能是 SSH 服务器，
它直接将您连接到旧式大型机的终端登
录提示符。）因此启用此选项可能会
导致某些类型的会话停止工作。由你决定。

\S{config-ssh-tryagent} \q{尝试使用 Pageant 进行身份验证}

如果启用此选项，PuTTY 将查找
Pageant（SSH 私钥存储代理）并尝试使用 Pageant 当前持有的任何合
适的公钥进行身份验证。

这种行为几乎总是可取的，因此默认启用。
在极少数情况下，您可能需要将其关闭以
强制通过某些非公钥方
法（例如密码）进行身份验证。

也可以使用 \c{-noagent} 命令行选项控制此选项。
请参阅 \k{using-cmdline-agentauth}。

有个Pageant 的更改信息，请参阅 \k{pageant} 。

\S{config-ssh-tis} \q{尝试 \I{TIS authentication}TIS 或
\i{CryptoCard 认证}}

TIS 和 CryptoCard 身份验证是（尽管有它们的名称）
\I{challenge/response authentication}简单质询/响应身份验证的通用形式，
仅在 SSH 协议版本 1 中可用。
例如，如果您使用 \i{S/Key} \i{一次性密码}，或者如果您有一个可
以生成对身份验证挑战的响应的物理\i{安全令牌}，
则可以使用它们。
它们甚至可以用来提示输入简单的密码。

启用此开关后，
如果服务器愿意尝试这些形式的身份验证，
PuTTY 将尝试它们。
您将看到一个质询字符串（每次可能不同），
并且必须提供正确的响应才能登录。
如果您的服务器支持这一点，
您应该与您的系统管理员讨论这些质询和响应的具体形式。

\S{config-ssh-ki} \q{尝试\i{键盘交互认证}}

TIS 身份验证的 SSH-2 等效项称为\q{键盘交互}。
 它是一种灵活的身份验证方法，
 使用任意顺序的请求和响应；
 因此它不仅对\I{challenge/response authentication}挑战/响
 应机制（例如 \i{S/Key}）有用，
 而且还可以用于（例如）在\I{password
 expiry}旧密码过期时向用户询问新密码。

PuTTY 默认启用此选项，但提供了一个开关以将其关闭，
以防您遇到问题。

\S{config-ssh-agentfwd} \q{允许\i{代理转发}}

此选项允许 SSH 服务器打开转发连接
回您的 \i{Pageant} 本地副本。
如果您没有运行 Pageant，则此选项不会执行任何操作。

有关 Pageant 的一般信息，
请参阅\k{pageant}，有关代理转发的信息，
请参阅\k{pageant-forward} 。请注意，
启用此选项存在安全风险；详见\k{pageant-security} 。

\S{config-ssh-changeuser} \q{允许在 SSH-2 中尝试\i{更改用户名}}

在 SSH-1 协议中，验证失败后无法更改用户名。
因此，如果您在 PuTTY 的\q{login as:}提示符处
输入错误的用户名，您将无法更改它，
除非重新启动 PuTTY。

原则上，SSH-2 协议\e{确实}允许更改用户名，
但并不强制 SSH-2 服务器接受它们。
特别是，\i{OpenSSH} 不接受用户名的更改；
一旦您发送了一个用户名，它将拒绝尝试以另
一用户身份进行身份验证的尝试。 （取决于 OpenSSH
的版本，它可能会悄悄地返回所有登
录尝试失败，或者它可能会发送错误消息。）

因此，如果服务器抱怨，
PuTTY 默认不会多次提示您输入用户名。
如果您知道您的服务器可以处理它，
您可以启用\q{允许尝试更改用户名}选项来修改 PuTTY 的行为。

\H{config-ssh-auth-creds} 凭证面板

认证面板的此子窗格包含配置选项，
这些选项指定要提供给服务器
的实际\e{凭证}：密钥文件和证书。

\S{config-ssh-privkey} \q{用于身份验证的\ii{私钥文件}}

如果您使用\i{公钥身份验证}，
您可以在此框中输入私钥文件的名称。
有关 SSH 中的公钥认证的信息，请参阅 \k{pubkey}。

此密钥必须采用 PuTTY 的本机格式 (\c{*.\i{PPK}})。
如果您有要与 PuTTY 一起使用的另一种格式的私钥，
请参阅\k{puttygen-conversions}。

您可以使用身份验证代理 \i{Pageant}，
这样您就不需要在此处显式配置密钥；见 \k{pageant}。

如果在 Pageant 运行时在此处指定了私钥文件，
PuTTY 将首先尝试要求 Pageant 使用该密钥进行身份验证，
并忽略 Pageant 可能拥有的任何其他密钥。
如果失败，PuTTY 将照常要求输入密码。
在这种情况下，您还可以指定一个\e{公钥文件}（采用 RFC 4716 或 OpenSSH 格式），
因为这足以识别 Pageant 的密钥，
但当然，如果 Pageant 不存在，PuTTY 不能回退到使用这个文件本身。

\S{config-ssh-cert} \q{要与私钥一起使用的\ii{证书}}

(这是可选的。
如果您不知道自己需要它，可以将其留空。)

在某些环境中，用户身份验证密钥可以依次
由\q{证书颁发机构}（简称\q{CA}）进行签名，并且 SSH 服务
器上的用户帐户可以配置为自动信
任由正确签名认证的任何密钥。

如果您有大量服务器，这可能是一个方便的设置。
更改密钥对时，您可能必须分别编辑每台服务器
上的\cw{authorized_keys}文件，
以使它们全部接受新密钥。
但是，如果您将所有这些服务器配置为接受由CA签名的密钥，
那么当您更改公钥时，您所要做的就是获得与
以前相同的CA认证的新密钥，然后所有服务器
都将自动接受它，而无需单独重新配置。

使用证书的一种方法是将其合并到您的私钥文件中。
\K{puttygen-cert} 解释了如何使用普替根来做到这一点。
但另一种方法是告诉PuTTY本身在哪
里可以找到公共证书文件，然后在使用
相应的私钥进行身份验证时自动提供该证书。

为此，请在\q{要与私钥一起使用的证书}文
件选择器中输入证书文件的路径名。

配置此设置后，无论私钥是在文件中找
到还是加载到Pageant中，PuTTY都将遵循此设置。

\S{config-ssh-authplugin} \q{提供身份验证响应的\ii{插件}}

SSH服务器可以使用\q{键盘交互}协议来
呈现一系列任意问题和答案。
有时这用于普通密码，但有时服务器将使用
相同的机制来处理更复杂的内容，
例如一次性密码系统。

其中一些系统可以自动化。为此，PuTTY允许您
提供一个单独的程序作为\q{插件}，
该程序将接管身份验证并
代表您发送问题的答案。

如果您已获得此类型的插件，
则可以在此处进行配置，
方法是在\q{要运行的插件命令}框中输入完整的命令行。

（如果要\e{编写}此类型的插件，
请参阅 \k{authplugin} ，了解插件预期行为方式的完整规范。）

\H{config-ssh-auth-gssapi} \i{GSSAPI} 面板

\q{认证}面板的\q{GSSAPI}子面板控制 GSSAPI 身份验证的使用。
这是一种将身份验证交换委托给客户
端计算机上其他地方的库的机制，
原则上可以以多种不同的方式进行身份验证，
但实际上通常与 \i{Kerberos} \i{single
sign-on}协议一起使用以实现\i{无密码登录}。

GSSAPI 身份验证仅在 SSH-2 协议中可用。

PuTTY 支持两种形式的基于 GSSAPI 的身份验证。
其中之一，SSH 密钥交换以正常方式发生，
GSSAPI 仅参与用户身份验证。
标记为\q{尝试 GSSAPI 身份验证}的复选框控制此表单。

在另一种方法中，基于 GSSAPI 的身份验证与 SSH 密钥交换阶段相结合。
如果这成功了，那么 SSH 身份验证步骤就没有什么可做的了。
有关此方法的更多信息，
请参阅 \k{config-ssh-gssapi-kex} 。
标记为\q{尝试 GSSAPI 密钥交换}的复选框控制此表单。
（相同的复选框出现在\q{密钥交换}面板上。）

如果启用了这些控件中的一个或两个，
则将以一种或另一种形式尝试 GSSAPI 身份验证，
并且（通常）如果您的客户端计算机加载了有效的 Kerberos 凭据，
那么 PuTTY 应该能够自动向支
持 Kerberos 的服务器进行身份验证登录。

如果这两个复选框都被禁用，PuTTY 将根本不会
尝试任何形式的 GSSAPI，并且该面板的其余部分将不会被使用。

\S{config-ssh-auth-gssapi-delegation} \q{允许 GSSAPI
凭证委托}

\i{GSSAPI 凭证委托}是一种将您的 Kerberos（或其他）
身份传递给 SSH 服务器上的会话的机制。
如果启用此选项，
那么 PuTTY 不仅能够自动登录
到接受您的 Kerberos 凭据的服务器，而且您还能够
从该服务器连接到其他支持 Kerberos 的服务并使用
相同的凭据作为自动。

（这个选项是 SSH 代理转发的 Kerberos 类似物；
有关这方面的一些信息，请参见 \k{pageant-forward}。）

请注意，与 SSH 代理转发一样，
使用此选项也存在安全隐患：您连接的服务器的管理
员或其他任何破解了该服务器管理员帐户的人，
在进一步连接时可能会伪造
您的身份Kerberos 支持服务。
但是，Kerberos 站点通常由中央机构运行，
因此一台服务器
的管理员很可能也已经可以访问其他服务；
所以这通常比 SSH 代理转发的风险要小。

如果您的连接未使用 GSSAPI 密钥交换，
则委派可能会在您的会话期间过期。
有关详细信息，请参阅 section \k{config-ssh-gssapi-kex}。

\S{config-ssh-auth-gssapi-libraries} GSSAPI
库的优先顺序

GSSAPI 是一种允许通过同一接口访
问多个身份验证方法的机制。
因此，您的系统上可能存在多个可
以使用 GSSAPI 访问的身份验证库。

PuTTY 包含对一些著名的此类库
（包括 Windows 的 \i{SSPI}）的本机支持，
并将在您的系统上查找所有这些库并使用它找到的任何一个。
如果您的系统上存在多个并且您需要使用特定的一个，
您可以使用此首选项列表控件调整搜索顺序。

首选项列表中的选项之一是使用用户指定的 GSSAPI 库。
如果 PuTTY 的选项列表中未按名称提及您要使用的库，
您可以在\q{用户提供的 GSSAPI 库路径}字段
中输入其完整路径名，
并在首选项中移动\q{用户提供的 GSSAPI 库}选项列表
以确保在其他任何内容之前选择它。

在 Windows 上，此类库是具有 \I{DLL}\cw{.dll} 扩展名的文件，
并且必须以与您正在运行的 PuTTY 可执行文件相同的方式
构建；如果您有 32 位 DLL，则必须运行 32
位版本的 PuTTY，与 64 位相
同(请参阅 \k{faq-32bit-64bit})。
在 Unix 上，共享库通常具有 \cw{.so} 扩展名。

\H{config-ssh-tty} TTY面板

TTY远程终端面板允许您配置远程伪终端。

\S{config-ssh-pty} \I{pseudo-terminal
allocation}\q{不分配伪终端}

当连接到 \i{Unix} 系统时，
大多数\I{interactive connections}交互式 shell 会话都在\e{伪终端}中运行，
这允许 Unix 系统假装它正在与真实的物理终端设备对话，
但允许 SSH 服务器捕获来自该假设备的所有数据，
并且 将其发送回客户端。

有时您可能会发现您需要运行不在伪终端中的会话。
在 PuTTY 中，这通常只用于非常专业的
目的； 尽管在 Plink（参见\k{plink}）
中这是通常的工作方式。

\S{config-ttymodes} 发送\i{终端模式}

SSH 协议允许客户端为远程伪终
端发送\q{终端模式}。 这些通常控
制服务器对本地终端行为的期望。

如果您的服务器对这些模式没有合理的默认值，
您可能会发现在此处更改它们会有所帮助，
尽管服务器可以随意忽略您的更改。 如果您对此一无所知，
可以放心地保留这些设置。

（如果没有请求或分配伪终端，
这些设置都不会产生任何影响。）

您可以通过在列表中选择特定模式，
选择其中一个选项并在必要时指定确切值，
然后点击\q{设置}来更改特定模式发生的情况。
选项的效果如下：

\b 如果选择了\q{自动}选项，
PuTTY 工具将决定是否向服务器指定该模式，
如果是，将发送一个合理的值。

\lcont{

PuTTY 正确的将发送它有意见的模式（
当前只有退格键的代码，\cw{ERASE}，
以及字符集是否为 UTF-8，\cw{IUTF8}）。
Unix 上的 Plink 将从本地终端传播适当的模式，如果有的话。

}

\b 如果选择\q{无}，则在任何情况下
都不会为服务器指定模式值。

\b 如果指定内容，它将在任何情况
下都被发送到服务器。
内容框的精确语法取决于模式。

默认情况下，所有可用模式都列为\q{自动}，
这在大多数情况下应该是正确的。

每个设置的精确效果（如果有）取决于服务器。
它们的名字来自 \i{POSIX} 和其他 Unix
系统，它们最有可能对这些系统产生有用的影响。
（这些设置与登录到此类服务器后通常可以使用 \i\c{stty}
命令更改的设置相同。）

下面描述了一些值得注意的模式； 有
关更完整的解释，请参阅您的服务器文档。

\b \I{ERASE special character}\cw{ERASE}
是用户输入时将向左删除一个空格的字符。 当设置为\q{自动}（默认设置）时，
这将遵循 PuTTY 中本地退格键的设置
(请参阅 \k{config-backspace})。

\lcont{
此特殊字符和其他\i{特殊字符}使用 Ctrl-C 的 \c{^C} 表示法指定，
依此类推。 使用 \c{^<27>} 或 \c{^<0x1B>} 以
数字方式指定字符，
使用 \c{^~} 获取文字 \c{^}。
其他\e{非}控制字符由它们自己表示。
将该框完全留空表示不应将任何字符分配给指定的功能，
尽管这可能并非所有服务器都支持。
}

\b \I{QUIT special character}\cw{QUIT}  是一个特殊字符，
通常强制结束服务器上的当前进程（\cw{SIGQUIT}）。
在许多服务器上，
它的默认设置是 Ctrl-反斜杠 (\c{^\\})，
这很容易在许多键盘上意外调用。 如果这妨碍了您，
您可能希望将其更改为另一个角色或完全关闭它。

\b 在 PuTTY 中可以通过多种方式指
定 \cw{ECHO} 和 \cw{ICANON} 等布尔模式，
例如\cw{true}/\cw{false}、\cw{yes}/\cw{no}和 \cw{0}/\cw{1}。
（明确指定值 \cw{no} 与根本不发送模式不同。）

\b 布尔模式 \I{IUTF8 terminal mode}\cw{IUTF8} 向服务器
发送终端字符集是否为 \i{UTF-8} 的信号，
用于基本行编辑等目的； 例如，如果设置不正确，
退格键可能会删除错误数量的文本。
但是，简单地设置它通常不足以
让服务器使用 UTF-8； POSIX 服务器通常还需要设置区域设
置（通过某些依赖于服务器的方式），
尽管许多较新的安装默认为 UTF-8。 此外，
由于这种模式比其他模式被添加到 SSH 协议中的时间要晚得多，
因此许多服务器（尤其是旧服务器）不支持通过 SSH 发送的这种模式；
事实上，一些写得不好的服务器反对它的存在，
所以你可能会发现你需要将它设置为根本不发送。
当设置为\q{动}时，
这将遵循本地配置的字符集（参见\k{config-charset})。

\b 终端速度在别处配置；请参阅 \k{config-termspeed}。

\H{config-ssh-x11} X11转发面板

X11 面板允许您配置通过SSH连
接的\i{X11转发}。

如果您的服务器允许您运
行 X Window System \i{图形应用程序}，X11 转发允许您安全地让这些应用
程序访问您 PC 上的本地 X 显示器。

要启用 X11 转发，请选中\q{启用 X11 转发}框。
如果您的 X 显示器有异常，您需要在\q{X 显示位置}
框中输入其位置； 如果将其留空，
PuTTY 将尝试在环境中找到合理的默认值，
或者如果失败，则使用主要的本地显示 (\c{:0})。

有关 X11 转发的更多信息，
请参阅\k{using-x-forwarding} 。

\S{config-ssh-x11auth} 远程 \i{X11 认证协议}

如果您使用 X11 转发，
在 SSH 服务器机器上创建的虚拟 X 服务器将受到授权数据的保护。
这些数据是由 PuTTY 发明和检查的。

用于此的常用授权方法称为 \i\cw{MIT-MAGIC-COOKIE-1}。
这是一个简单的密码式协议：X 客户端向服务器发
送一些 cookie 数据，服务器检查它是否与真
正的 cookie 匹配。 cookie 数据通过
未加密的 X11 连接发送；因此，
如果您允许第三台机器上的客户端访
问虚拟 X 服务器，那么 cookie 将以明文形式发送。

PuTTY 提供了替代协议 \i\cw{XDM-AUTHORIZATION-1}。
这是一个密码认证的协议：X客户端每次发送的数据
都不一样，它取决于连接的客
户端的IP地址和端口，
并且还带有当前时间的标记。因此，
捕获 \cw{XDM-AUTHORIZATION-1} 字符串的
窃听者无法立即将其重新用于自己的 X 连接。

PuTTY 对 \cw{XDM-AUTHORIZATION-1} 的支持是一个有点实验性的功能，
可能会遇到几个问题：

\b 一些 X 客户端可能甚至不支持 \cw{XDM-AUTHORIZATION-1}，
因此他们不知道如何处
理 PuTTY 提供的数据。

\b 此身份验证机制仅适用于 SSH-2。
在 SSH-1 中，SSH 服务器不会以机器可读的格式告诉
客户端转发连接的源地址，
因此无法验证 \cw{XDM-AUTHORIZATION-1} 数据。

\b 您可能会发现此功能会导致某些 SSH 服务器出现问题，
这些服务器在会话后不会清理 \cw{XDM-AUTHORIZATION-1} 数据，
因此如果您使用仅执行 \cw{MIT-MAGIC-COOKIE-1} 的客
户端连接到同一服务器 并分配了
相同的远程显示编号，
您可能会发现服务器上仍然存在过期的身份验证数据，
并且您的 X 连接失败。

PuTTY 的默认值为 \cw{MIT-MAGIC-COOKIE-1}。 如果你改变它，
你应该确定你知道你在做什么。

\S{config-ssh-xauthority} 本地显示的X授权文件

如果您使用 X11 转发，
您的转发连接最终指向的本
地 X 服务器本身可能需要授权。

一些 Windows X 服务器不需要这样做：
它们通过更简单的方式进行授权，
例如接受来自本地机器的任何连接，
但不接受来自其他任何地方的连接。
但是，如果您的 X 服务器确实需要授权，那么 PuTTY 需要知道需要什么授权。

使这些数据可用的一种方法是让 X 服务器将其存储
在与 Unix \c{.Xauthority} 文件具有相同格
式的文件中的某个位置。 如果这是您
的 Windows X 服务器的工作方式，那么您
可以通过配置此选项告诉 PuTTY 在哪里可以找到
此文件。 默认情况下，PuTTY 不会尝试为您的本地显示查找任何授权。

\H{config-ssh-portfwd} \I{port forwarding}隧道面板

隧道面板允许您通过 SSH 连接
配置任意连接类型的隧道。

端口转发允许您在 SSH 会话中通
过隧道传输其他类型的网络连接。 有关端口转发及其工作原理的一般性讨论，
请参见 \k{using-port-forwarding}。

隧道面板中的端口转发部分显示了 PuTTY 在连接到服
务器时将尝试设置的所有端口转发的列表。
默认情况下没有设置端口转发，
所以这个列表是空的。

添加端口转发：

\b 设置\q{本地}或\q{远程}单选按钮之一，
具体取决于您是\I{local port forwarding}将本地端口
转发到远程目标（\q{本地}）还是\I{remote port forwarding}将远程端
口转发到本地目标（\q{远程}）。
或者，如果您希望 PuTTY
在\I{dynamic port forwarding}本地端口上提供本地 SOCKS 4/4A/5 代理，
请选择\q{动态}（请注意，此代理仅支持
TCP 连接；SSH 协议不支持转发 \i{UDP}）。

\b 在\q{源端口}框中输入源\i{端口号}。
对于本地转发，PuTTY 将侦听您 PC 的此端口。
对于远程转发，您的 SSH 服务器将侦听远程计算机的此端口。 请注意，
大多数服务器不允许您\I{privileged port}侦听
小于 1024 的端口号。

\b 如果您选择了\q{本地}或\q{远程}（\q{动态}不需要此步骤），
请在\q{目标}框中输入以冒号分隔的主机名和端口号。
在源端口上收到的连接将被定向到此目标。
例如，要连接到 POP-3 服务器，您可以
输入 \c{popserver.example.com:110}。
（如果您需要输入文字 \i{IPv6 address}，
请将其括在方括号中，
例如\cq{[::1]:2200}。）

\b 单击\q{添加}按钮。 您的转发详
细信息应显示在列表框中。

要删除端口转发，只需在列表框中选
择其详细信息，然后单击\q{删除}按钮。

在\q{源端口}框中，您还可以通过指
定（例如）\c{127.0.0.5:79} 来选择
输入要监听的\I{listen
address} IP 地址。
有关其工作原理及其限制的更多信息，请参见 \k{using-port-forwarding}。

如果本地系统知道\i{服务名称}，
您可以输入服务名称来代替端口号。
例如，在\q{目标}框中，您可以输入 \c{popserver.example.com:pop3}。

您可以在\I{port forwarding, changing mid-session}会话中使
用\q{更改设置}修改当前活动的端口转
发集（参见 \k{using-changesettings}）。
如果您在会话中删除本地或动态端口转发，
PuTTY 将停止侦听该端口上的连接，
因此它可以被另一个程序重新使用。 如果删除远程端口转发，请注意：

\b SSH-1 协议不包含要求服务器停
止侦听远程端口的机制。

\b SSH-2 协议确实包含这样的机制，
但并不是所有的 SSH 服务器都支持它。
（特别是，\i{OpenSSH} 在 3.9 之前的任何版本中都不支持它。）

如果您要求删除远程端口转发并且 PuTTY
无法使服务器实际停止侦听该端口，
它将开始拒绝该端口上的传入连接。
因此，虽然该端口不能被其他程序重用，
但您至少可以合理地确定服务器端程序
在端口转发结束时无法再访问该服务。

如果您删除转发，则使用该转发建立的任
何现有连接都将保持打开状态。 同样，对全局设置
的更改（例如\q{本地端口接受来自其他主机的连接}）
只会对新的转发生效。

如果您通过SSH 转发的连接本身是另一个PuTTY
副本建立的第二个SSH 连接，您可能会
发现\q{逻辑主机名}配置选项可用于警
告 PuTTY 它应该期待哪个主机密钥。
请参阅 \k{config-loghost} 。

\S{config-ssh-portfwd-localhost} 控制转发端口的
可见性

转发连接的源端口通常不接受来自任何机器的连接，
除了 \I{localhost}SSH 客户端或服务器机器本
身（分别用于本地和远程转发）。
 隧道面板中有一些控件可以更改此设置：

\b \q{本地端口接受来自其他主机的连接}选
项允许您设置本地到远程端口转发，
以便客户端 PC 以外的计算机可以连接
到转发的端口。 （这也适用于动态 SOCKS 转发。）

\b \q{远程端口也是如此} 选项对远程到
本地端口转发执行相同的操作（以便 SSH 服务器机器以
外的机器可以连接到转发的端口。）请注意，
此功能仅适用于 SSH- 2 协议，
并不是所有的 SSH-2 服务器都支持它（例如，\i{OpenSSH} 不支持）。

\S{config-ssh-portfwd-address-family} 为转发端口选择
\i{Internet 协议版本}

此开关允许您为转发端口的本地端选择特定
的 Internet 协议（\i{IPv4} 或 \i{IPv6}）。
默认情况下，它设置为\q{自动}，这意味着：

\b 对于本地到远程端口转发，
PuTTY 将侦听 IPv4 和（如果可用）IPv6 中的传入连接

\b 对于远程到本地的端口转发，PuTTY 将
为传出连接选择一个合理的协议。

这会覆盖连接面板上的常规 Internet 协议版本首选项
(请参考 \k{config-address-family})。

请注意，即使您特别要求 IPv6，某些操作系统也
可能会侦听 IPv4 中的传入连接，
因为它们的 IPv4 和 IPv6 协议栈链接在一起。
显然 \i{Linux} 会这样做，而 Windows 不会。
因此，如果您在 Windows 上运行 PuTTY 并勾选\q{IPv6}以进行
本地或动态端口转发，则只能使用 IPv6 连接到它；
而如果你在 Linux 上做同样的事情，
你也可以在 IPv4 上使用它。 但是，勾选\q{自动}应始终为您提供一个端口，
您可以使用任一协议连接到该端口。

\H{config-ssh-bugs} \I{SSH server bugs}纠错和更多纠错面板

并非所有 SSH 服务器都能正常工作。
现有的各种服务器中都有错误，
这可能使客户端无法与它们交谈，除非它知道错误并解决它。

由于大多数服务器在 SSH 连接开始时会公布其软件版本号，
因此 PuTTY 将尝试检测它可以在服务器中看到的错误并
自动启用解决方法。
但是，有时它会出错；
如果服务器被故意配置为隐藏其版本号，
或者如果服务器是 PuTTY 的错误数据库不知道的版本，
那么 PuTTY 将不知道会出现什么错误。

Bugs 和 More Bugs 面板（有两个，
因为我们有很多错误兼容模式）
允许您手动配置 PuTTY 期望在服务器中看到的错误。
每个错误都可以配置为三种状态：

\b \q{关闭}: PuTTY 将假定服务器没有错误。

\b \q{开启}: PuTTY 将假定服务器确实存在错误。

\b \q{自动}: PuTTY 会使用服务器的版本号公
告来尝试猜测服务器是否有 bug。
（此选项不适用于\e{无法}从服务器版本检测到的错误，
例如，因为必须在知道服务
器版本之前对其进行操作。）

(PuTTY项目有一个明确的政策，关于我们何时准备
为错误解决方法添加自动检测。请参阅\k{feedback-workarounds}.)

\S{config-ssh-bug-ignore2} \q{阻塞SSH-2的\i{忽略消息}}

忽略消息 (SSH_MSG_IGNORE) 是 SSH 协议中的消息，
可以随时从客户端发送到服务器，
或从服务器发送到客户端。
任何一方都必须在收到消息时忽略该消息。
PuTTY 使用 SSH-2 中的忽略消息来混淆加密
数据流并使其更难进行密码分析。
它还使用忽略消息进行连接保持\i{keepalives}活动 (参考 \k{config-keepalive})。

如果它认为服务器有这个错误，PuTTY 将停止使用忽略消息。
 如果在与正确的服务器通信时启用了此错误，
 则会话将成功，但 keepalives 将不起作用，
 并且会话的密码安全性可能低于其应有的安全性。

\S{config-ssh-bug-rekey} \q{错误的处理SSH-2密钥重复交换}

一些 SSH 服务器根本无法处理\i{重复密钥交换}，
并且会忽略客户端启动密钥的尝试。
由于 PuTTY 在执行重复密钥交换时会暂停会话，
因此这样做会导致会话在一小时后挂起（
除非您将重新密钥超时设置为不同；
请参阅 \k{config-ssh-kex-rekey} )。
其他非常古老的 SSH 服务器对重复密钥交换的处理更加糟糕，
并且在收到重复密钥交换请求时会断开连接。

如果检测到此错误，PuTTY 将永远不会启动重复密钥交换。
如果在与正确的服务器通信时启用了此错误，
则会话应该仍然有效，
但可能不如您预期的安全。

这是一个特定于 SSH-2 的错误。

\S{config-ssh-bug-winadj} \q{PuTTY的 SSH-2 \cq{winadj} 请求阻塞}

PuTTY 有时会在通道数据中间向 SSH 服务器发送一个特殊请求，
名称为 \cw{winadj@putty.projects.tartarus.org}
（参见 \k{sshnames-channel}）。此请求的目的是
测量到服务器的往返时间，
PuTTY 使用该时间来调整其流量控制。
服务器实际上不必\e{理解}消息；预计会发回 \cw{SSH_MSG_CHANNEL_FAILURE} 消息，
表明它不理解它。
（PuTTY 的时间计算所需要的只是\e{某种}响应。）

众所周知，某些 SSH 服务器会以某种方式被此
消息弄糊涂——因为它的名称很长，或者因为它
们无法处理无法识别的请求名称，即使发回正确的失
败响应也是如此，或者因为他们明智地处理了它，
但是用毫无意义的垃圾邮件或其他东西填充了服务器的日志文件。
因此，PuTTY 支持这个 bug-compatibility 标志：
如果它认为服务器有这个 bug，它永远不会发送它
的\cq{winadj@putty.projects.tartarus.org}请求，
并且会在没有它的计时数据的情况下解决问题。

\S{config-ssh-bug-chanreq} \q{回复已关闭通道的请求}

RFC 4254 中发布的 SSH 协议存在歧义，
如果连接的一侧尝试关闭通道，
而另一侧同时在通道内发送请求并要求回复，
则会出现歧义。 RFC 4254 不清楚关闭方是否应
在宣布其关闭通道
的意图后回复通道请求。

2014 年 4 月对 \cw{ietf-ssh} 邮件列表的讨论
形成了明确的共识，
正确答案是否定的。
但是，由于规范中的模糊性，
一些 SSH 服务器已经实现了其他策略；
例如，\W{https://bugzilla.mindrot.org/show_bug.cgi?id=1818}{OpenSSH} 在修复之前一直是这样。

因为 PuTTY 在通道的整个生命周期内发送带
有\q{want reply}标志的通道请求
（参见 \k{config-ssh-bug-winadj}），所以当连
接到这样的服务器时，它可能会在认
为通道已完全关闭后收到对请求的回复，并以错误“\q{收到不存在的通道 256 的
\cw{SSH2_MSG_CHANNEL_FAILURE}}行结束。

\S{config-ssh-bug-maxpkt2} \q{忽略 SSH-2 \i{最大数据包大小}}

当建立 SSH-2 通道时，每一端都会宣布它
愿意为该通道接收的最大数据包大小。
一些服务器忽略 PuTTY 的声明并发
送大于 PuTTY 愿意接受的数据包，
导致它报告\q{传入数据包在解密时出现乱码}。

如果检测到此错误，PuTTY 绝不允许通道
的\i{流量控制窗口} 增长到足够大以允
许服务器发送超大数据包。 如果在与正确的服务器通信时启用了
此错误，则会话将正常工作，
但下载性能将低于应有的水平。

\S{config-ssh-bug-dropstart} \q{丢弃在其问候之前发送的数据}

只是偶尔，可以通过某个
通道建立 SSH 连接，这会在
连接的早期意外丢弃传出数据。

这通常不会被视为实际 SSH 服务器中的错误，
但有时会在涉及复杂代
理进程的情况下发生。一个例子
是 \W{https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=991958}{Debian
bug #991958}，
其中通过用户模式 Linux 内核控制台的连接可能
会在内核完全启动之前丢失传出数据。

您可以通过手动启用此错误标志来解决此问题，
这将导致 PuTTY 等待发送其初始 SSH 问候，
直到它看到来自服务器的问候。

请注意，永远无法自动检测到此错误标志，
因为自动检测依赖于服务器问候语中的版本字符串，
并且 PuTTY 必须在看到服务器的问候语
\e{之前}决定是否预期此错误。 所以这只是一个手动解决方法。

\S{config-ssh-bug-filter-kexinit} \q{阻塞PuTTY上的所有\cw{KEXINIT}}

在 SSH 连接开始时，客户端和服务器
交换 \cw{SSH_MSG_KEXINIT} 类型的长消息，
其中包含它们准备使用的所有加密算法的列表。
这用于协商一组两端都可以对话的算法。

有时，编写得不好的服务器可能会
在准备接收的列表上有长度限制，
并且仅仅因为PuTTY给了它太多的选择而拒绝建立连接。

解决方法是启用此标志，这将使 PuTTY 等待发送 \cw{KEXINIT}，
直到它从服务器收到该标志，
然后过滤自己的 \cw{KEXINIT} 以省略服务器
不宣布支持的任何算法。
这通常会使 PuTTY 的 \cw{KEXINIT}
最多达到服务器的大小，否则对算法协商没有任何影响。

此标志轻微违反了SSH协议，
因为双方都应该主动发送\cw{KEXINIT}。
如果一方在不等待的情况下发送其\cw{KEXINIT}，
它仍然有效，但是如果客户端和服务器都等待另一方先说话，
则连接将死锁。我们不知道有任何服务器这样做，
但如果有的话，那么这个标志将
使PuTTY根本无法与他们通讯。

\S{config-ssh-bug-rsa-sha2-cert-userauth} \q{旧的 RSA/SHA2 证书
算法命名}

如果 PuTTY 尝试使用 RSA 密钥执行 SSH-2 用户身份验证，
并且服务器正在使用基于 SHA-2 的较新版本之一
SSH RSA协议，并且用户的密钥也是证书，那么
早期版本的 OpenSSH（最高 7.7）与更高版本不一致
关于要发送的正确密钥算法字符串
\cw{SSH2_MSG_USERAUTH_REQUEST} 数据包。现代版本发送字符串
这表示 SHA-2 性质和 SHA-2 的证书性质
键，例如 \cq{rsa-sha2-512-cert-v01@openssh.com}。早期版本
会拒绝这一点，并坚持要看
\cq{ssh-rsa-cert-v01@openssh.com} 后跟基于 SHA-2 的签名。

PuTTY 应该自动检测早期 OpenSSH 中是否存在此错误
并调整以发送正确的字符串。

\S{config-ssh-bug-sig} \q{需要对 SSH-2 \i{RSA} \i{签名}进行填充}

\i{OpenSSH} 3.3 以下的版本要求 SSH-2 RSA 签名
用零字节填充到与 RSA 密钥模数相同的长度。
SSH-2 规范说必须接受未填充的签名，
所以这是一个错误。 这个问题的一个典型症状是，
PuTTY 每隔几百次尝试就会神秘地失败 RSA 身份验证，
然后回退到密码。

如果检测到此错误，PuTTY 将以 OpenSSH 预期的方式填充其签名。
如果在与正确的服务器通信时启用了此错误，
则很可能不会造成任何损害，
因为正确的服务器通常仍接受填充签名，
因为它们习惯于与 OpenSSH 通信。

这是一个特定于 SSH-2 的错误。

\S{config-ssh-bug-oldgex2} \q{仅支持 pre-RFC4419 SSH-2 DH GEX}

使用 Diffie-Hellman group exchange 的 SSH 密钥交换方
法在其原始版本之后进行了重新设计，
以使用稍微复杂的设置消息。
几乎所有的 SSH 实现都切换到了新版本。 （PuTTY 是最后一个。）
一些旧服务器仍然只支持旧服务器。

如果检测到此错误，并且客户端和服务器协商 Diffie-Hellman 组交换，
那么 PuTTY 将发送现在称
为 \cw{SSH2_MSG_KEX_DH_GEX_REQUEST_OLD} 的旧
消息来代替新的 \cw{SSH2_MSG_KEX_DH_GEX_REQUEST}。

这是一个特定于 SSH-2 的错误。

\S{config-ssh-bug-hmac2} \q{错误计算 SSH-2 HMAC 密钥}

\q{在数据包中收到错误的 MAC}.
来自 \cw{ssh.com} 的 SSH 服务器软
件 2.3.0 及以下版本错误地计算了其 \i{HMAC} \i{消息身份验证代码}的密钥。
此问题的典型症状是 PuTTY 在会话开始时意外死亡，
并显示\q{在数据包中收到错误的 MAC}。

如果检测到此错误，PuTTY 将按照与错
误服务器相同的方式计算其 HMAC 密钥，
因此仍然可以进行通信。
如果在与正确的服务器通信时启用了此错误，则通信将失败。

这是一个特定于 SSH-2 的错误。

\S{config-ssh-bug-pksessid2} \q{滥用SSH-2 PK 身份验证中的\i{会话 ID}}

\i{OpenSSH} 2.3 以下的版本要求 SSH-2 \i{公钥认证}的方式略有不同：
客户端要签名的数据包含以
不同方式格式化的会话 ID。
如果公钥身份验证神秘地不起作用，
但事件日志（请参阅 \k{using-eventlog}）认为它已成功发送签名，
则可能值得启用此错误的解
决方法以查看它是否有帮助。

如果检测到此错误，PuTTY 将以 OpenSSH 预期的方式对数据进行签名。
如果在与正确的服务器通信时启用了此错误，
则 SSH-2 公钥身份验证将失败。

这是一个特定于 SSH-2 的错误。

\S{config-ssh-bug-derivekey2} \q{错误计算 SSH-2 \i{加密}密钥}

来自 \i\cw{ssh.com} 的 SSH 服务器软件 2.0.11
以下的版本计算会话加密的密钥不正确。
此问题可能会导致各种错误消息，
例如\q{传入的数据包在解密时出现乱码}，甚至可能是\q{内存不足}。

如果检测到此错误，PuTTY 将按照与错误服务
器相同的方式计算其加密密钥，
因此仍然可以进行通信。 如果在与正确的服务器通信时启用了此错误，
则通信将失败。

这是一个特定于 SSH-2 的错误。

\S{config-ssh-bug-ignore1} \q{阻塞SSH-1的\i{忽略消息}}

忽略消息 (SSH_MSG_IGNORE) 是 SSH 协议中的消息，
可以随时从客户端发送到服务器，
或从服务器发送到客户端。
任何一方都必须在收到消息时忽略该消息。
PuTTY 使用忽略消息将\I{password camouflage}密码包隐藏在 SSH-1 中，
使监听器无法得知用户密码的长度；
它还对连接保持\i{keepalives}活
动使用忽略消息（参见 \k{config-keepalive}）。

如果检测到此错误，PuTTY 将停止使用忽略消息。
这意味着 keepalives 将停止工作，PuTTY 将不得不退回到针对 SSH-1
密码长度窃听的二级防御。
请参见 \k{config-ssh-bug-plainpw1}。
如果在与正确的服务器通信时启用了此错误，
则会话将成功，但 keepalives 将不起作用，
并且会话可能更容易受到窃听者的攻击。

\S{config-ssh-bug-plainpw1} \q{拒绝所有 SSH-1\i{密码伪装}}

当与无法处理忽略消息的 SSH-1 服务器通信
时（参见 \k{config-ssh-bug-ignore1}），
PuTTY将尝试通过在密码包中发送额外的填充来伪装用户密码的长度。
这\e{在}技术上违反了 SSH-1 规范，因此 PuTTY
只会在它不能使用符合标准的忽略消息作为伪装时才会这样做。
从这个意义上说，
服务器拒绝接受填充密码包并不是一个真正的错误，
但如果服务器也不能处理忽略消息，
它确实会给生活带来不便。

如果检测到这个\q{错误}，
PuTTY 将假定忽略消息和填充都是不可接受的，
因此它别无选择，
只能发送不加掩饰的用户密码，
以便窃听用户很容易找到出密码的确切长度。
如果在与正确的服务器通信时启用了此错误，
则会话将成功，但更容易受到窃听者的攻击。

这是一个特定于 SSH-1 的错误。
SSH-2 对这种类型的攻击是安全的

\S{config-ssh-bug-rsa1} \q{阻塞SSH-1 \i{RSA}认证}

一些 SSH-1 服务器根本无法处理 RSA 身份验证消息。
如果 \i{Pageant}  正在运行并且包含任何 SSH-1 密钥，
PuTTY 通常会在回退到密码之前自动尝试 RSA 身份验证，
因此这些服务器在看到 RSA 尝试时会崩溃。

如果检测到此错误，
PuTTY 将直接进行密码验证。
如果在与正确的服务器通信时启用此错误，
会话将成功，但当然 RSA 身份验证将是不可能的。

这是一个特定于 SSH-1 的错误。

\H{config-psusan} \q{Bare \cw{\i{ssh-connection}}} 协议

除了 SSH 本身，PuTTY 还支
持从 SSH 派生的第二种协议。
它在 PuTTY GUI 中以\q{Bare \cw{ssh-connection}}的名称列出。

该协议仅由 SSH-2 的三层中的最里面组成：
它省略了提供网络安全的加密层，
并且省略了您提供用户名并证明您可
以以该用户身份登录的身份验证层。

因此，\s{它完全不适合任何网络连接}。
不要试图通过网络使用它！

该协议的目的是针对各种特殊情况，
其中\q{连接} 不是通过真实网络，
而是在同一台计算机上运行的不同进
程之间的管道或 IPC 通道。
在这些情况下，操作系统已经保证两个通信进程中
的每一个都由预期用户拥有（因此不需要身份验证），
并且通信通道不能被同一台机器上
的敌对用户窃听（因此也不需要加密）。
可能使用的示例涉及与高度
分离的上下文进行通信，
例如容器内部、VM 或不同的网络命名空间。

PuTTY 0.75 中新增了对该协议的显式支持。
截至 2021 年 4 月，唯一已知
的\cw{ssh-connection}协议服务器
是 Unix 程序\cq{\i{psusan}}，它也是 PuTTY 工具套件的一部分。

（不过，这个协议也是 PuTTY 实例之间用来实现连接共享
的协议：请参阅 \k{config-ssh-sharing}。
事实上，在 Unix 版本的 PuTTY 中，
当共享上游在事件日志中记录\q{在 [pathname] 共享此连接} 时，
可以通过在主机中输入其路径名将另一个
PuTTY 实例直接连接到该 Unix 套接字
名称框并选择\q{Bare \cw{ssh-connection}} 作为协议！）

SSH 面板下的许多选项也会影响此协议，
尽管出于显而易见的原因，
与加密和身份验证有关的选项不会。

我再说一遍，\s{不要尝试将此协议用于网络连接！} 这不是它的用途，
而且这样做一点也不安全。

\H{config-serial} 串口面板

\i{串口}面板允许您配置仅在
PuTTY 连接到本地\I{serial port}\i{串行线}路时适用的选项。

\S{config-serial-line} 选择要连接的串口

如果您的计算机有多个串行端口，
\q{要连接的串行线}框允许您选
择希望 PuTTY 与之通信的串行线。

在 Windows 上，第一条串行线称为 \i\cw{COM1}，
如果有第二条，则称为 \cw{COM2}，依此类推。

此配置设置在会话面板上也可见，
如果连接类型设置为\q{串口}，
它将替换\q{主机名}框（请参阅 \k{config-hostname}）。

\S{config-serial-speed} 选择串口的速度

\q{速度}框允许您选择与串行线路通
信的速度（或\q{波特率}）。
典型值可能是 9600、19200、38400 或 57600。
您需要哪一个取决于串行电缆另一端的设备； 如果您有疑问，
请查阅该设备的手册。

此配置设置在会话面板上也可见，
如果连接类型设置为\q{串口}，
它将替换\q{端口}框（请参阅 \k{config-hostname}）。

\S{config-serial-databits} 选择数据位数

\q{数据位} 框允许您选择在通过串行线
发送或接收的每个字节中传输多少数据位。
典型值为 7 或 8。

\S{config-serial-stopbits} 选择停止位数

\q{停止位} 框允许您选择在串行线
路协议中使用多少停止位。 典型值为 1、1.5 或 2。

\S{config-serial-parity} 选择串口奇偶校验方案

\q{奇偶校验}框允许您选择串行线路上使用的奇偶校验类型。
设置如下：

\b \q{暂无}: 根本没有发送奇偶校验位。

\b \q{Odd}: 一个额外的奇偶校验位与每个字节一起发送，
并安排为使 1 位的总数为奇数。

\b \q{Even}: 一个额外的奇偶校验位与每个字节一起发送，
并安排为使 1 位的总数为偶数。

\b \q{Mark}: 一个额外的奇偶校验位与每个字节一起发送，
并且始终设置为 1。

\b \q{Space}: 一个额外的奇偶校验位与每个字节一起发送，
并且始终设置为 0。

\S{config-serial-flow} 选择串口流控方案

\q{流控制}框允许您选择在串行线路上使用哪种类型的流控制检查。
设置如下：

\b \q{暂无}: 没有进行流量控制。 如果任何一方尝试发送的速度超过串行线路允许的速度，
则数据可能会丢失。

\b \q{XON/XOFF}: 流量控制是通过在数据流中
发送 XON 和 XOFF 字符来完成的。

\b \q{RTS/CTS}: 流量控制是使用串行线路
上的 RTS 和 CTS 线完成的。

\b \q{DSR/DTR}: 流量控制是使用串行线路
上的 DSR 和 DTR 线完成的。

\H{config-telnet} \i{Telnet} 面板

Telnet 面板允许您配置仅适
用于 Telnet 会话的选项。

\S{config-oldenviron} \q{处理 OLD_ENVIRON 歧义}

用于传递\i{环境变量}的原始 Telnet 机制被错误地指定。
在编写标准 (RFC 1408) 时，
BSD telnet 实现已经支持该功能，
该标准的目的是描
述 BSD 实现已经使用的行为。

遗憾的是，该标准在发布时出现了打字错误，
并且两个重要的功能代码被错误地指定了。
BSD 实现没有改变，标准也没有更正。
因此，您可能会在那里找到符
合 \i{BSD} 或 \i{RFC} 的实现。
此开关允许您选择哪个 PuTTY 声称是。

通过发布第二个标准解决了这个问题，
定义了一个名为 \i\cw{NEW_ENVIRON} 的新 Telnet 机制，
其行为与原始 \i\cw{OLD_ENVIRON} 完全相同，但不受现有实现的阻碍。
大多数 Telnet 服务器现在都支持这一点，
而且它是明确的。仅当您无法将环境变量传
递给相当旧的服务器时才需要此功能。

\S{config-ptelnet} 被动和主动 \i{Telnet 协商}模式

在 Telnet 连接中，客户端和服务器之间传递了两种类
型的数据：实际文本，以及关于使用
哪些 Telnet 额外功能的\e{协商}。

PuTTY 可以使用两种不同的协商策略：

\b \I{active Telnet negotiation}在\e{主动}模式下，
PuTTY 会在连接打开后立即开始发送协商。

\b \I{passive Telnet negotiation}在\e{被动}模式下，
PuTTY 将等待协商，直到它看到来自服务器的协商

被动模式的明显缺点是，如果服务器也在被动模式下运行，
那么协商将永远不会开始。
因此，PuTTY 默认为活动模式。

但是，有时需要被动模式才能成功通过某些类
型的\i{防火墙}和\i{Telnet proxy}服务器。
如果您对防火墙感到困惑，
您可以尝试启用被动模式以查看它是否有帮助。

\S{config-telnetkey} \q{键盘发送 \i{Telnet 特殊命令}}

如果选中此框，则会修改几
个键序列的正常操作：

\b 键盘上的Backspace退格键将\I{Erase Character,
Telnet special command}发送 Telnet 特殊退格码；

\b Control-C 将\I{Interrupt Process, Telnet
special command}发送 Telnet 特殊中断进程代码；

\b Control-Z 将\I{Suspend Process, Telnet
special command}发送 Telnet 特殊的暂停进程代码。

除非您知道自己在做什么，
否则您可能不应该启用此功能。

\S{config-telnetnl} \q{Return(回车)键发送\i{Telnet 新行}代码而不是 ^M’}

与大多数其他远程登录协议不同，Telnet 协议有一个特殊的\q{\i{换行}}代码，
与通常的 Control-M 或 Control-J 行结尾不同。
默认情况下，当您按 Return 时，
PuTTY 会发送 Telnet 新行代码，
而不是像在大多数其他协议中那样发送 Control-M。

大多数 Unix 风格的 Telnet 服务器不介意接
收 Telnet New Line 还是 Control-M。
有些服务器确实期待新线，有些服务器更喜欢看到^M。
如果您在 Telnet 会话中按 Return 时看到令人惊讶的行为，
您可以尝试关闭此选项以查看是否有帮助。

\H{config-rlogin} Rlogin 面板

\i{Rlogin} 面板允许您配置仅适用
于 Rlogin 会话的选项。

\S{config-rlogin-localuser} \I{local username in Rlogin}\q{本地用户名}

Rlogin 允许通过服务器上名为 \i\c{.rhosts} 的文件进行自动（无密码）登录形式。
你在你的 \c{.rhosts} 文件中写下
类似 \c{jbloggs@pc1.example.com} 的一行，
然后当你建立一个 Rlogin 连接时，
客户端会传输运行 Rlogin 客户端的用户的用户名。
服务器根据 \c{.rhosts} 检查用户名和主机名，
如果它们匹配，它不会要求\I{passwordless login}输入密码。

这只适用于 Unix 系统包含阻止用户在 Rlogin 连接中伪装成另一个用户的保护措施。
Rlogin 连接必须来自
低于 1024 的\I{privileged port}端口号，
Unix 系统禁止非特权进程这样做；因此，
当服务器看到来自低编号端口的连接时，
它假定连接的客户端由特权（因此受信任）进程持有，
因此它相信用户是谁的声明。

没有此限制：任何用户都可以从低编号端口发起传出连接。
因此，Rlogin \c{.rhosts} 机制对于安全区分 Windows
机器上的几个不同用户是完全没有用的。
如果您有一个指向 Windows PC 的 \c{.rhosts} 条目，
您应该假设使用该 PC 的\e{任何人}都可以在 Rlogin
连接中\i{欺骗}您的用户名并访
问您在服务器上的帐户。

\q{本地用户名}控件允许您指定 PuTTY 应该
声称您拥有的用户名，
以防它与您的 \i{Windows 用户名}不匹
配（或者如果您没有费心设置 Windows 用户名）。

\H{config-supdup} \i{SUPDUP} 面板

SUPDUP 面板允许您配置仅适用于 SUPDUP 会话的选项。
 有关 SUPDUP 协议的更多信息，
 请参见 \k{using-supdup}。

\S{supdup-location} \q{位置字符串}

在 SUPDUP 中，客户端将其选择的一段文本发送到服务器，
以提供用户的位置。
这通常显示在登录用户列表中。

默认情况下，PuTTY 只是将其默认为“The Internet”。
如果您希望您的位置显示为更具体的内容，
您可以在此处进行配置。

\S{supdup-ascii} \q{扩展 ASCII 字符集}

这声明了您的终端支持哪种字符集扩展。
如果服务器支持它，
它将使用该字符集发送文本。 \q{无}表示标准的 95 个
可打印 ASCII 字符。 \q{ITS} 表示在控制字符范围内
使用可打印字符扩展的 ASCII。
此字符集记录在 SUPDUP 协议定义中。
\q{WAITS}类似于\q{ITS}，但在扩展集中使用了一些替代字
符：最突出的是，它将显示箭头而不是\c{^}和\c{_}，以
及\c{\}}而不是\c{~}。 ITS 和 Lisp 机器使用\q{ITS}扩展
ASCII，而\q{WAITS}仅用于斯坦福 AI 实验
的 WAITS 操作系统。

\S{supdup-more} \q{**MORE** 处理}

启用 **MORE** 处理时，会导致服务器输出在屏幕底部暂停，
直到输入空格。

\S{supdup-scroll} \q{终端滚动}

这控制终端是否将执行滚
动然后光标移到最后一行以下，
或者光标是否将返回到第一行。

\H{config-file} \ii{将配置存储在文件中}

PuTTY 目前不支持将其配置存储
在文件而不是\i{注册表}中。 但是，
您可以使用几个\i{批处理文件}来解决此问题。.

您将需要一个名为（比如说）\c{PUTTY.BAT} 的文件，
它将文件的内容导入注册表，然后运行 PuTTY，
将注册表的内容导出回文件，
并删除注册表条目。 这一切都可以使用 Regedit 命令行选项来完成，
因此都是自动的。
这是您在 \c{PUTTY.BAT} 中需要的内容：

\c @ECHO OFF
\c regedit /s putty.reg
\c regedit /s puttyrnd.reg
\c start /w putty.exe
\c regedit /ea new.reg HKEY_CURRENT_USER\Software\SimonTatham\PuTTY
\c copy new.reg putty.reg
\c del new.reg
\c regedit /s puttydel.reg

此批处理文件需要两个辅助文件：\c{PUTTYRND.REG} 为 \c{PUTTY.RND}
随机种子文件设置初始安全位置，
以及 \c{PUTTYDEL.REG} 在成功保存回
文件后销毁注册表中的所有内容。

这里是\c{PUTTYDEL.REG}：

\c REGEDIT4
\c
\c [-HKEY_CURRENT_USER\Software\SimonTatham\PuTTY]

下面是一个\c{PUTTYRND.REG}文件例子：

\c REGEDIT4
\c
\c [HKEY_CURRENT_USER\Software\SimonTatham\PuTTY]
\c "RandSeedFile"="a:\\putty.rnd"

您应该将 \c{a:\\putty.rnd} 替换为您想要
存储随机数数据的位置。
如果目标是在一个 U 盘上携带 PuTTY 及其设置，
您可能希望将其存储在 U 盘上。
