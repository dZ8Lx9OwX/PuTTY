\C{using} 使用PuTTY

本章对 PuTTY 的一些更高级的功能进行了一般性介绍。
出于极端细节和参考目的，
\k{config}可能包含更多信息。

\H{using-session} 在您的会话期间

PuTTY 的许多复杂性和功能都在配置面板中。
一旦你完成了这些工作并开始了一个会话，
之后的事情就应该相当简单了。
尽管如此，还有一些更有用的功能可用。

\S{using-selection} 复制和粘贴文本

\I{copy and paste}通常在 PuTTY 会话中，
您会在终端屏幕上找到要再次输入的文本。
与大多数其他终端仿真器一样，PuTTY
允许您复制和粘贴文本，而不必再次键入。
此外，复制和粘贴使用\I{Windows clipboard}Windows \i{剪贴板}，
以便您可以将（例如）URL 粘贴到 Web
浏览器中，或从文字处理器或电子表格粘贴到终端会话中。

默认情况下，PuTTY 的复制和粘贴完全使用\i{鼠标}。
（这对于在 Unix 上使用过\i\c{xterm}
的人来说会很熟悉。）为了将文本复制到剪贴板，
您只需在\i{终端窗口}中单击\i{鼠
标左键}，然后拖动以\I{selecting text}选择文本。
当您松开按钮时，文本会\e{自动}复制到剪贴板。
您不需要按 \i{Ctrl-C} 或 \i{Ctrl-Ins}；
事实上，如果你按下 Ctrl-C，PuTTY 会在你的会话中发送一个
Ctrl-C 字符到服务器，它可能会导致进程中断。

粘贴到PuTTY是使用右键（或鼠标中键，如果您有一个\i{三键鼠标}并已设置；
请参阅\k{config-mouse})。
（按 \i{Shift-Ins} 或从\I{right mouse button, with Ctrl}Ctrl+right-click，
右键单击弹出的\i{右键菜单}中选择\q{粘贴}具有相同的效果。）
当您单击\i{鼠标右键}时，PuTTY 将读取 Windows
剪贴板中的任何内容并将其粘贴到您的会话中。
默认情况下，这与在键盘上输入剪贴板内容\e{完全}一样；
因此，将格式化文本粘贴到自动执行\i{缩进}的编辑器时要小心，
因为您可能会发现从
剪贴板粘贴的空格加上编辑器添加的空格加起来太多空格会破坏格式。
（一些远程应用程序可以要求
PuTTY识别正在粘贴的文本，
以避免此类问题；
但如果您的应用程序没有要求，
则PuTTY无法避免这种情况。）

如果\i{双击}\i{鼠标左键}，
PuTTY 将\I{selecting words}选择整个单词。
如果双击，按住第二次单击并拖动鼠标，
PuTTY 将选择一个完整的单词序列。
（您可以精确调整 PuTTY 认为是单词的一部分；
请参阅\k{config-charclasses}。) 如果您\e{三击}或\i{三击并拖动}，
则 PuTTY将\I{selecting lines}选择整行或行序列。

如果您想\I{rectangular selection}选择矩形区域而不是选择
到每行的末尾，您可以通过在进行选择时按
住 Alt 来执行此操作。
您还可以将矩形选择配置为默认设置，
然后按住 Alt会给出正常行为：
请参阅 \k{config-rectselect} 。

（在某些 Unix 环境中，Alt+drag
会被窗口管理器拦截。Shift+Alt+drag
也应该适用于矩形选择，因此您可以尝试这样做。）

如果您有\i{鼠标中键}，则可以将其用于
\I{adjusting a selection}调整现有选区，
纠正您选择的一些错误内容。
（如果您已将鼠标中键配置为粘贴，
则鼠标右键将执行此操作。）单击屏幕上的按钮，
您可以选择最近的选择端并将其拖动到其他位置。

如果您在 Unix 上运行 PuTTY 本身（不仅仅是使用
它从 Windows 连接到 Unix系统），默认情况下，
您可能必须在其他应用程序中使用类似的鼠标操作来粘贴从
PuTTY 复制的文本，并复制文本 用于粘贴到 PuTTY 中；\i{Ctrl-C} 和 Ctrl-V
之类的操作可能不会像您预期的那样运行。
\k{config-clipboards}解释为什么会这样，
以及如何改变行为。 （在 Windows
上，只有一个选择与其他应用程序共享，因此不会出现这种混淆。）

服务器可能会要求处理鼠标在 PuTTY 窗口
中的单击事件\I{mouse reporting}。如果发生这种情况，
\i{鼠标指针}会变成一个箭头，并且只有按住 Shift
才能使用鼠标进行复制和粘贴。
请参阅 \k{config-features-mouse} 和\k{config-mouseshift}
有关此功能的详细信息以及如何配置它。

您可以自定义大部分此类行为，例如启用从键盘复制和粘贴；
请参阅\k{config-selection}。

\S{using-scrollback} \I{scrollback}向后滚动屏幕

PuTTY 会跟踪从终端顶部向上滚动的文本。
因此，如果屏幕上出现了您想要阅读的内容，
但它滚动得太快并且在您尝试查找时已经
消失，您可以使用窗口右侧的\i{滚动条}来
查看会话\i{历史}记录 并再次找到它。

除了使用滚动条之外，您还可以通过按 \i{Shift-PgUp}
和 \i{Shift-PgDn}上下翻页。
您可以使用 \i{Ctrl-PgUp} 和 \i{Ctrl-PgDn}
一次滚动一行，或者使用 \i{Ctrl-Shift-PgUp} 和 \i{Ctrl-Shift-PgDn}
滚动到回滚的顶部/底部。
如果您将滚动条配置为不可见，这些仍然可用。

默认情况下，从顶部滚动的最后 2000 行将保留供您查看。
您可以使用配置框增加（或减少）该值,
请参阅\k{config-scrollback}。

\S{using-sysmenu} \ii{系统菜单}

如果在 PuTTY终端窗口左上角的图标上单击鼠标左键，
或在标题栏上单击鼠标右键，
您将看到标准的 Windows 系统菜单，
其中包含最小化、移动、大小和关闭等项目。

除了 Windows 标准选项之外，
PuTTY 的系统菜单还包含额外的程序功能。
这些额外的菜单命令如下所述。

（这些选项也可以在通过按住 Ctrl
并在 \i{PuTTY窗口}中的任意位置单
击鼠标右键来调出的\i{右键菜单}中使用。）

\S2{using-eventlog} PuTTY\i{事件日志}

如果您从系统菜单中选择\q{事件日志}，则会弹
出一个小窗口，PuTTY在其中记录连接期间的重要事件。
日志中的大多数事件可能会在会话启动期间发生，
但少数可能会在会话的任何时间点发
生，最后会发生一两个。

您可以使用鼠标选择一行或多行事件日志，
然后点击复制按钮将它们复制到\i{剪贴板}。
如果您要报告错误，将事件日志的内容粘
贴到错误报告中通常很有用。

（事件日志与创建会话日志文件的工具不同,
请参阅 \k{using-logging}.)

\S2{using-specials} \ii{特殊命令}

根据当前会话使用的协议，可能会有一个\q{特殊命令}子菜单。
这些是特定于协议的指令，例如\q{中断}信号，
除了正常数据外，还可以通过连接发送。
它们的精确效果通常取决于服务器。
目前只有 Telnet、SSH
和串行连接有特殊命令。

\q{中断}信号也可以使
用 \i{Ctrl-Break} 从键盘调用。

在 SSH 连接中，可以使用以
下\I{SSH special commands}特殊命令：

\b \I{IGNORE message, SSH special command}\I{No-op, in SSH}\ii{IGNORE 信息}

\lcont{
应该没有影响。
}

\b \I{Repeat key exchange, SSH special command}重复密钥交换

\lcont{
仅在 SSH-2 中可用。
立即强制\i{重复密钥交换}（并重置相关的计时器和计数器）。
有关重复密钥交换的更多信息，请参阅 \k{config-ssh-kex-rekey} 。
}

\b \I{host key cache}缓存新的主机密钥类型

\lcont{
仅在 SSH-2 中可用。 仅当服务器具有 PuTTY
尚未缓存的类型的主机密钥时才会出现此子菜单，一般不需要考虑。
在此处选择一个密钥将允许 PuTTY 现在和将来使用该密钥：PuTTY
将与所选密钥进行新的密钥交换，并立即将该密钥添加到其
永久缓存中（依赖于在开始
时使用的主机密钥） 连接以交叉验证新密钥）。
该密钥将用于当前会话的其余部分；
它实际上可能不会用于将来的会话，具体取决于您的偏好 (请参阅
\k{config-ssh-hostkey-order}。

通常，PuTTY 将继续使用它已经知道的主机密钥，
即使服务器提供 PuTTY
本来希望使用的密钥格式，以避免主机密钥提示。
因此，如果您已经使用服务器多年，由于服务器升级，
您可能仍在使用比新用户使用的
旧的密钥。 遗憾的是，SSH
协议没有用于主机密钥迁移和翻转的通告机制，
但这允许您手动升级\I{host keys, upgrading}。
}

\b \I{Break, SSH special command}中断

\lcont{
仅在 SSH-2 中可用，并且仅在会话期间可用。
可选扩展； 服务器可能不支持。
PuTTY 请求服务器的默认中断长度。
}

\b \I{Signal, SSH special command}信号 (SIGINT, SIGTERM 等等)

\lcont{
仅在 SSH-2 中可用，并且仅在会话期间可用。
发送各种 POSIX 信号。 并非所有服务器都认可。
}

Telnet \I{Telnet special commands}中
提供了以下特殊命令：

\b \I{Are You There, Telnet special command}在线吗？

\b \I{Break, Telnet special command}中断

\b \I{Synch, Telnet special command}同步

\b \I{Erase Character, Telnet special command}删除字符

\lcont{
PuTTY 也可以配置为在按下 Backspace 键时发送，
请参阅 \k{config-telnetkey}。
}

\b \I{Erase Line, Telnet special command}删除行

\b \I{Go Ahead, Telnet special command}前进

\b \I{No Operation, Telnet special command}无操作

\lcont{
应该没有影响。
}

\b \I{Abort Process, Telnet special command}中止过程

\b \I{Abort Output, Telnet special command}中止输出

\b \I{Interrupt Process, Telnet special command}中断进程

\lcont{
PuTTY 也可以配置为在键入 Ctrl-C 时发送，
请参阅 \k{config-telnetkey}。
}

\b \I{Suspend Process, Telnet special command}暂停进程

\lcont{
PuTTY 也可以配置为在键入 Ctrl-Z 时发送，
请参阅 \k{config-telnetkey}。
}

\b \I{End Of Record, Telnet special command}记录结束

\b \I{End Of File, Telnet special command}文件结束

对于串行连接，唯一可用的特殊命令
是\I{Break, serial special command}\q{中断}。

\S2{using-newsession} 开始新会话

PuTTY 的系统菜单提供了
一些启动新会话的快捷方式：

\b 选择\i{\q{新建会话}}将启动一个全新的 PuTTY 实例，
并正常显示配置框。

\b 选择\i{\q{重复会话}}将在一个新窗口中启动一个会话，
其选项与您当前的选项完全相同 -
使用相同的协议连接到同一主机，
具有所有相同的终端设置和所有内容。

\b 在非活动窗口中，选择\i{\q{重启会话}}将
与\q{复制会话}相同，但在当前窗口中。

\b \i{\q{保存会话}子菜单}可让您快速访问您之
前保存的任何一组存储的会话详细信息。
有关如何创建已保存会话的详细信息，请参阅 \k{config-saving}。

\S2{using-changesettings} \I{settings, changing}更改
会话设置

如果您从系统菜单中选择\i{\q{更改设置}} ，
PuTTY 将显示其初始配置框的简化版本。
这允许您调整当前会话的大多数属性。
您可以更改终端大小、字体、各种按
键的操作、颜色等。

主配置框中的一些可用选项未显示在缩
减的更改设置框中。 这些通常是在会
话中间更改没有意义的选项（例如，您
不能在会话中间从 SSH 切换到 Telnet）。

您可以通过此对话框将当前设置保存
到已保存的会话中以供将来使用。
有关已保存会话的更多信息，请参阅 \k{config-saving} 。

\S2{using-copyall} \i{全部复制到剪贴板}

此系统菜单选项提供了一种方便的方式来复制
终端屏幕的全部内容（直到最后一个非空行）
并一次滚动回\i{剪贴板}。

\S2{reset-terminal} \I{scrollback, clearing}清除和
\I{terminal, resetting} 重启终端

系统菜单上的\i{\q{清除回滚}}选项
告诉 PuTTY 丢弃所有从屏幕顶部滚动
后保留的文本行。这可能很有用，
例如，如果您显示敏感信息并希望
确保没有人可以越过您的肩膀看到它。
（请注意，这只会阻止临时用户
使用滚动条查看信息；不保证文本
不会仍在 PuTTY 的内存中。）

\i{\q{重启终端}}选项会导致\i{终端仿真}完全重置。
VT 系列终端是一个复杂的软件，
很容易进入打印的所有文本都无法阅读的状态。
（例如，如果您不小心将二进制文件输出到终端，
就会发生这种情况。）如果发生这种情况，
选择“重启终端”应该可以解决这个问题。

\S2{using-fullscreen} \ii{全屏模式}

如果您发现最大化窗口上的标题栏很难看或分散注意力，
您可以选择全屏模式以\q{更多}最大化 PuTTY。
当您选择此项时，PuTTY 将展开以填满整个屏幕，并且其边框、
标题栏和滚动条将消失。
（如果要保留滚动条，可以配置滚动条
在全屏模式下不消失；请参阅  \k{config-scrollback}。)

当您处于全屏模式时，如果单击屏
幕\e{最}左上角的鼠标左键，
您仍然可以访问\i{系统菜单}。

\H{using-logging} 创建会话的日志文件\I{session
log}

出于某些目的，您可能会发现您想要记
录屏幕上显示的所有内容。 您可以使
用配置框中的\q{日志}面板来执行此操作。

要开始会话日志，请从系统菜单中选择\q{更改设置}，
然后转到“日志记录”面板。 输入日志文件名，
然后选择日志记录模式。 （您可以记录所有会话输出，包括终端\i{控制顺序}，
或者您可以只记录可打印的文本。这取决于您想要的日志。）
单击\q{应用}，您的日志将开始。 稍后，
您可以返回日志记录面板并选择\q{完全关闭日志记录}
以停止日志记录； 然后 PuTTY 将关闭日志文件，
您可以安全地阅读它。

了解更多详细信息和选项，请参阅 \k{config-logging} 。

\H{using-translation} 改变你的\i{字符集}配置

如果您发现特殊字符（例如\i{重音字符}或\i{画线字符}）
在 PuTTY 会话中未正确显示，
则可能是 PuTTY 正在根据错误
的\e{字符集设置}解释服
务器发送的字符。 有很多不同的字符集可用
，PuTTY 没有很好的方法知道该使用哪个，
因此完全有可能发生这种情况。

如果您单击\q{更改设置}并查
看\q{字符转换}面板，
您应该会看到大量可供选择的
字符集以及其他相关选项。 现在您所需要的就是找出您想要的！
(更多信息，请参阅 \k{config-translation}。)

\H{using-x-forwarding} 在 SSH 中使用 X11 转发

SSH 协议能够通过加密的 SSH 连接安全地转发
 X Window System \i{图形应用程序} ，
这样您就可以在 SSH 服务器机器上运行应用程序，
并让它在您的本地机器上打开它的窗口，
而无需发送任何 X 网络流量。

为了使用此功能，您需要为您的 Windows 机
器配备一个 X 显示服务器，例如 Cygwin/X、X-Win32
或 Exceed。 这可能会将自己安装为本地计算
机上的显示编号 0； 如果没有，\i{X 服务器}的
手册应该会告诉你它做了什么。

然后，您应该勾选 X11 面板中的\q{启用 X11 转发}
(请参阅 \k{config-ssh-x11}) 在开始 SSH
会话之前。 \i{\q{X 显示位置}}框默认为空白，
这意味着 PuTTY 将尝试使用合理的默认值，例如 \c{:0}，
 这是安装 X 服务器的常用显示位置。
 如果需要改变，那就改变它。

现在您应该可以正常登录 SSH 服务器了。
要检查连接启动期间是否已成功协商 X 转发，
您可以查看 PuTTY 事件日志(请参阅 \k{using-eventlog})。
 它应该这样显示：

\c 2001-12-05 17:22:01 Requesting X11 forwarding
\c 2001-12-05 17:22:02 X11 forwarding enabled

如果远程系统是 Unix 或类 Unix，
您还应该能够看到 \i{\c{DISPLAY}}环
境变量已设置为指向 SSH 服务器机器本身的显示 10 或更高版本：

\c fred@unixbox:~$ echo $DISPLAY
\c unixbox:10.0

如果这可行，那么您应该能够在远程会话中
运行 X 应用程序并让它们在您的 PC 上显示它们的窗口。

有关 X11 转发的更多选项，请参阅 \k{config-ssh-x11}。

\H{using-port-forwarding} 在 SSH 中使用端口转发

SSH 协议能够通过加密的 SSH 连接转
发任意网络(TCP)连接\I{network connection} ，
以避免网络流量以明文形式发送。
 例如，您可以使用它从您的家庭计算
 机连接到远程计算机上的 POP-3 服务器，
 而网络嗅探器不会看到您的 \i{POP-3}  密码。

为了从计算机使用本地端口转发\I{local port forwarding}
连接到远程服务器上的端口，您需要：

\b 在本地计算机上选择一个\i{端口号} ，
PuTTY 应在其中侦听传入连接。
可能有很多未使用的端口号高于3000。
（您也可以在此处使用本地环回地址；有关详细信息，请参见下文。）

\b 现在，在开始 SSH 连接之前，
请转到 隧道面板(请参阅 \k{config-ssh-portfwd})。
 确保设置了\q{本地}单选按钮。
 在\q{源端口}框中输入本地端口号。
 在\q{目标}框中输入目标主机名和端口号，
 用冒号分隔（例如，popserver.example.com:110 以连接到 POP-3 服务器）。

\b 现在单击\q{添加} 按钮。
端口转发的详细信息应显示在列表框中。

现在开始您的会话并登录。（只有在您登录
后才会启用端口转发；否则很容易执行完全
匿名的网络攻击，并获得对任何人的虚拟专
用网络的访问权限。）检查 PuTTY 是否已设
置 正确启动端口转发，您可以查看 PuTTY
事件日志 (请参阅 \k{using-eventlog})。它应该这样显示：

\c 2001-12-05 17:22:10 Local port 3110 forwarding to
\c          popserver.example.com:110

现在，如果您连接到本地 PC 上的源端口号，您应该会发现
它完全可以回答您，就好像它是在目标计算机上运行的服务一样。
因此，在本例中，您可以将电子邮件客户端配
置为使用 \c{localhost:3110} 作为 POP-3
服务器，而不是 \c{popserver.example.com:110}。
（当然，当您的 PuTTY 会话关闭时，转发将停止。）

您还可以在另一个方向转发端口：安排
将\e{服务器}计算机上的\I{remoteport forwarding}
特定端口号转发回您的 PC，作为与
您 PC 上或附近的服务的连接。
为此，只需选择\q{远程}单选按钮而不是\q{本地}单
选按钮。 \q{源端口} 框现在将指定\e{服务器}上
的端口号（请注意，大多数服务器不允许您为此使
用 1024 以下的\I{privileged port}端口号）。

将本地连接转发到远程主机的另一种方法是
使用\I{dynamic port forwarding}动态 SOCKS 代理。
在这种模式下，PuTTY 充当 SOCKS 服务器，支持 SOCKS
的程序可以连接到它并打开到他们选择的目的地
的转发连接，因此这可以替代长静态转发列表。
要使用此模式，您需要选择\q{动态}单选按钮而
不是\q{本地}，然后您不应在\q{目的地}框中
输入任何内容（它将被忽略）。 然后，PuTTY
将在您指定的端口上侦听 SOCKS 连接。
大多数\i{web浏览器}都可以配置为
连接到这个 SOCKS 代理服务； 也可以通过设置
代理控制面板转发其他PuTTY连接 (请参阅 \k{config-proxy} )。

转发连接的源端口通常不接受来自任
何机器的连接，除了 SSH \I{localhost}客户端或服务
器机器本身（分别用于本地和远程转发）。
隧道面板中有一些控件可以更改此设置：

\b \q{本地端口接受来自其他主机的连接}选项
允许您设置本地到远程端口转发（包括动态
端口转发），以便客户端 PC 以外的机器
可以连接到转发的端口。

\b \q{远程端口也是如此} 选项对远程
到本地端口转发执行相同的操作（以便 SSH 服务
器计算机以外的计算机可以连
接到转发的端口。）请注意，此功能仅在 SSH- 中可用 2 协议，
并不是所有的 SSH-2 服务器都支持
它（例如，在\i{OpenSSH} 中，它通常默认禁用）。

您还可以指定要监听的\I{listen address} \i{IP 地址}。
通常，可以要求 Windows 机器侦听 \cw{127.*.*.*}
范围内的任何单个 IP 地址，所有这些都是仅对本
地机器可用的\i{环回地址}。 因此，如果您
将（例如）\c{127.0.0.5:79} 转发到远程机
器的\i\cw{finger} 端口，那么您应该能够运
行诸如\c{finger fred@127.0.0.5} 之类的命令。
如果连接到转发端口的程序不允许您更改它使用
的端口号，这将很有用。 此功能适用于本地到
远程的转发端口； SSH-1 无法支持远程到本地
的端口，而 SSH-2 理论上可以支持，
但服务器不一定会配合。

（请注意，如果您使用的是 Windows XP Service Pack 2，
则可能需要从 Microsoft 获得修复才能使
用 \cw{127.0.0.5} 等地址 --- 请参阅 \k{faq-alternate-localhost}。)

有关端口转发的更多选项，
请参阅 \k{config-ssh-portfwd}。

如果您通过 SSH 转发的连接本身是另一
个 PuTTY 副本建立的第二个 SSH 连接，
您可能会发现\q{逻辑主机名}配
置选项可用于警告PuTTY 它应该期待哪个
主机密钥。请参阅 \k{config-loghost} 。

\H{using-serial} 连接到本地串行线

PuTTY 可以直接连接到本地串行线路，作为建
立网络连接的替代方法。在此模式下，
输入到 PuTTY窗口的文本将直接从计算机的串行端口发送，
通过该端口接收的数据将显示在PuTTY 窗口中。
例如，如果您的串行端口连接到另一台具
有串行连接的计算机，您可能会使用此模式。

要建立这种类型的连接，只需从\q{会话}配置
面板上的\q{连接类型}单选按钮中选择\q{串口}
(请参阅 \k{config-hostname})。
\q{主机名}和\q{端口}框将转换为\q{串行线}和\q{波特率}，
允许您指定使用哪条串行线（如果您的计算机有多个）
以及何时使用的速度（波特率） 传输数据。
对于进一步的配置选项（数据位、停止位、
奇偶校验、流控制），您可以使用\q{串口}
配置面板(请参阅\k{config-serial})。

在串行模式下启动 PuTTY
后，您可能会发现您必须迈出第一步，
通过从串行线路发送一些数据以通知另一端的设
备有人在那里与之交谈。 这可能取决于设备。
如果您启动 PuTTY串行会话并且窗口中没有显示任何内容，
请尝试按 Return 几次，看看是否有帮助。

串行线路没有为连接的一端提供明确
定义的方法来通知另一端连接已完成。
因此，串行模式下的 PuTTY 将保持连
接状态，直到您使用关闭按钮关闭窗口。

\H{using-rawprot} 建立 \i{raw TCP 连接}

许多\I{debugging Internet protocols}互联网协议都是由
纯文本的命令和响应组成的。
例如，\i{SMTP}（用于传输电子邮件的协议）
、\i{NNTP}（用于传输 Usenet 新闻的协议）
和 \i{HTTP}（用于服务网页的协议）都
由可读的纯文本命令组成。

有时，通过键入协议命令并观察响应，
直接连接到其中一项服务并\q{手动}说
出协议会很有用。在 Unix 机器上，
您可以使用系统的 \c{telnet} 命令连
接到正确的端口号。
例如，\c{telnet mailserver.example.com 25}可能使您能够直接与邮件服务器上
运行的 SMTP 服务通信。

尽管 Unix \c{telnet} 程序提供了此功能，
但所使用的协议并不是真正的 Telnet。真的根本没有实际的协议；
沿着连接发送的字节正是您键入的字节，
屏幕上显示的字节正是服务器发送的字节。
 Unix \c{telnet} 将尝试检测或猜测它正在
 与之交谈的服务是否是真正的 Telnet
 服务； PuTTY 更喜欢被告知。

为了与这种类型的服务建立调试连接，
您只需从\q{会话}配置面板中连接类型，
其他\q{协议}选项，选择第四个协议名称 \I{\q{Raw}
protocol}\q{Raw}(请参阅 \k{config-hostname}。)
然后，您可以输入主机名和端口号，然后进行连接。

\H{using-telnet} 使用 \i{Telnet} 协议连接

PuTTY 可以使用 Telnet 协议连接到服务器。

Telnet 可能是在引入 SSH 之前最流行的远程登录协议。
它足够通用，可以被多个服务器操作
系统（特别是 Unix 和VMS）使用，
并且支持许多可选的协议扩展，
为特定的服务器功能提供额外的支持。

与 SSH 不同，Telnet 运行在不安全的网络连
接上，因此在充满敌意的 Internet 上使用它
是一个非常糟糕的主意（尽管到 2020 年它仍在一定程度上使用）。

\H{using-rlogin} 使用 \i{Rlogin} 协议连接

PuTTY 可以使用 Rlogin 协议连接到服务器。

Rlogin 在概念上类似于 Telnet，但更
侧重于 Unix 机器之间的连接。 它支持
基于\q{特权端口}（编号低于 1024 的端
口，Unix 传统上不允许 \cw{root} 以外
的用户分配）的无密码登录功能。 最终，
基于服务器相信客户端的 IP 地址归它声
称的 Unix 机器所有，并且该机器会适当
地保护其特权端口。

与 Telnet 一样，Rlogin 运行在不安全的网络连接上。

\H{using-supdup} 使用 \i{SUPDUP} 协议连接

PuTTY 可以使用 SUPDUP 协议连接到服务器。

SUPDUP 是 1975-1990 年期间主要由 PDP-10
和 Lisp 机器使用的登录协议。 与 Telnet
和 Rlogin 一样，它是不安全的，因此现代系统几乎从不支持它。

要建立这种类型的连接，请从\q{会话}面板
上的\q{连接类型}单选按钮中选择\q{SUPDUP}
(请参阅 \k{config-hostname})。如需更多配置
选项（字符集、更多处理、滚动），您可以
使用\q{SUPDUP}配置面板(请参阅 \k{config-supdup}).

在 SUPDUP 中，终端仿真与网络协议的集
成程度高于其他协议（如 SSH）。 因此，
SUPDUP 协议只能与 PuTTY 一起使用，而
不能与命令行工具 Plink 一起使用。

SUPDUP 协议不支持更改终端尺寸，
因此在 SUPDUP 会话期间禁用此功能。

SUPDUP 没有为连接的一端提供明确定
义的方法来通知另一端连接已完成。
因此，SUPDUP 模式下的 PuTTY 将保
持连接状态，直到您使用关闭按钮关闭窗口。

\H{using-cmdline} PuTTY 命令行

通过提供\i{命令行参数}（例如，
从\i{命令提示符窗口}或 \i{Windows 快捷方式}），
PuTTY 可以在没有用户干预的情况下执行各种操作。

\S{using-cmdline-session} 从命令行启动会话

\I\c{-ssh}\I\c{-ssh-connection}\I\c{-telnet}\I\c{-rlogin}\I\c{-supdup}\I\c{-raw}\I\c{-serial}These
这些选项允许您绕过配置窗口
并直接启动到会话中。

要启动与名为 \c{host} 的服务器的连接：

\c putty.exe [-ssh | -ssh-connection | -telnet | -rlogin | -supdup | -raw] [user@]host

如果使用此语法，则从\i{默认设置}中获取设置(请参阅
\k{config-saving})；如果提供\c{user}，
将覆盖这些设置。 此外，您可以指定一个协议，
该协议将覆盖默认协议 (请参阅 \k{using-cmdline-protocol})。

对于 telnet 会话，支持以下替代语法
（这使得 PuTTY 适合用作\i{浏览器}
中 \i{telnet URLs} 的 URL 处理程序）：

\c putty.exe telnet://host[:port]/

启动到串行端口的连接，例如 COM1：

\c putty.exe -serial com1

要启动一个名为 \c{sessionname} 的现有保存会话，
请使用 \c{-load} 选项 (请参阅 \k{using-cmdline-load}).

\c putty.exe -load "session name"

\S{using-cleanup} \i\c{-cleanup} 清理

如果调用 \c{-cleanup} 选项，而不是正常运行，
PuTTY 将从本地计算机中\i{删除注册表项}中的相关内容
\I{removing registry entries}和\i{随机种子文件}
（在与用户确认后）。 它还将尝试
删除有关存储在 Windows 7 及更高版
本的\q{跳转列表}中的最近启动会话的信息。

请注意，在\i{多用户系统}上，
\c{-cleanup} 仅删除与当前登
录用户相关联的注册表项和文件。

\S{using-general-opts} 标准命令行选项

PuTTY及其相关工具支持一系列命令行选项，
其中大部分在所有工具中都是一致的。
本节列出了所有工具中的可用选项。
特定于特定工具的选项在关于该工
具的章节中进行了介绍。

\S2{using-cmdline-load} \i\c{-load}: load a saved session

\I{saved sessions, loading from command line}The \c{-load} option
causes PuTTY to load configuration details out of a saved session.
If these details include a host name, then this option is all you
need to make PuTTY start a session.

You need double quotes around the session name if it contains spaces.

If you want to create a \i{Windows shortcut} to start a PuTTY saved
session, this is the option you should use: your shortcut should
call something like

\c d:\path\to\putty.exe -load "my session"

(Note that PuTTY itself supports an alternative form of this option,
for backwards compatibility. If you execute \i\c{putty @sessionname}
it will have the same effect as \c{putty -load "sessionname"}. With
the \c{@} form, no double quotes are required, and the \c{@} sign
must be the very first thing on the command line. This form of the
option is deprecated.)

\S2{using-cmdline-protocol} Selecting a protocol: \c{-ssh},
\c{-ssh-connection}, \c{-telnet}, \c{-rlogin}, \c{-supdup},
\c{-raw}, \c{-serial}

To choose which protocol you want to connect with, you can use one
of these options:

\b \i\c{-ssh} selects the SSH protocol.

\b \i\c{-ssh-connection} selects the bare ssh-connection protocol.
(This is only useful in specialised circumstances; see \k{config-psusan}
for more information.)

\b \i\c{-telnet} selects the Telnet protocol.

\b \i\c{-rlogin} selects the Rlogin protocol.

\b \i\c{-supdup} selects the SUPDUP protocol.

\b \i\c{-raw} selects the raw protocol.

\b \i\c{-serial} selects a serial connection.

Most of these options are not available in the file transfer tools
PSCP and PSFTP (which only work with the SSH protocol and the bare
ssh-connection protocol).

These options are equivalent to the \i{protocol selection} buttons
in the Session panel of the PuTTY configuration box (see
\k{config-hostname}).

\S2{using-cmdline-v} \i\c{-v}: increase verbosity

\I{verbose mode}Most of the PuTTY tools can be made to tell you more
about what they are doing by supplying the \c{-v} option. If you are
having trouble when making a connection, or you're simply curious,
you can turn this switch on and hope to find out more about what is
happening.

\S2{using-cmdline-l} \i\c{-l}: specify a \i{login name}

You can specify the user name to log in as on the remote server
using the \c{-l} option. For example, \c{plink login.example.com -l
fred}.

These options are equivalent to the username selection box in the
Connection panel of the PuTTY configuration box (see
\k{config-username}).

\S2{using-cmdline-portfwd} \I{-L-upper}\c{-L}, \I{-R-upper}\c{-R}
and \I{-D-upper}\c{-D}: set up \i{port forwardings}

As well as setting up port forwardings in the PuTTY configuration
(see \k{config-ssh-portfwd}), you can also set up forwardings on the
command line. The command-line options work just like the ones in
Unix \c{ssh} programs.

To \I{local port forwarding}forward a local port (say 5110) to a
remote destination (say \cw{popserver.example.com} port 110), you
can write something like one of these:

\c putty -L 5110:popserver.example.com:110 -load mysession
\c plink mysession -L 5110:popserver.example.com:110

To forward a \I{remote port forwarding}remote port to a local
destination, just use the \c{-R} option instead of \c{-L}:

\c putty -R 5023:mytelnetserver.myhouse.org:23 -load mysession
\c plink mysession -R 5023:mytelnetserver.myhouse.org:23

To \I{listen address}specify an IP address for the listening end of the
tunnel, prepend it to the argument:

\c plink -L 127.0.0.5:23:localhost:23 myhost

To set up \I{dynamic port forwarding}SOCKS-based dynamic port
forwarding on a local port, use the \c{-D} option. For this one you
only have to pass the port number:

\c putty -D 4096 -load mysession

For general information on port forwarding, see
\k{using-port-forwarding}.

These options are not available in the file transfer tools PSCP and
PSFTP.

\S2{using-cmdline-m} \i\c{-m}: \I{reading commands from a file}read
a remote command or script from a file

The \i\c{-m} option performs a similar function to the \q{\ii{Remote
command}} box in the SSH panel of the PuTTY configuration box (see
\k{config-command}). However, the \c{-m} option expects to be given
a local file name, and it will read a command from that file.

With some servers (particularly Unix systems), you can even put
multiple lines in this file and execute more than one command in
sequence, or a whole shell script; but this is arguably an abuse, and
cannot be expected to work on all servers. In particular, it is known
\e{not} to work with certain \q{embedded} servers, such as \i{Cisco}
routers.

This option is not available in the file transfer tools PSCP and
PSFTP.

\S2{using-cmdline-p} \I{-P-upper}\c{-P}: specify a \i{port number}

The \c{-P} option is used to specify the port number to connect to. If
you have a Telnet server running on port 9696 of a machine instead of
port 23, for example:

\c putty -telnet -P 9696 host.name
\c plink -telnet -P 9696 host.name

(Note that this option is more useful in Plink than in PuTTY,
because in PuTTY you can write \c{putty -telnet host.name 9696} in
any case.)

This option is equivalent to the port number control in the Session
panel of the PuTTY configuration box (see \k{config-hostname}).

\S2{using-cmdline-pw} \i\c{-pwfile} and \i\c{-pw}: specify a \i{password}

A simple way to automate a remote login is to supply your password
on the command line.

The \c{-pwfile} option takes a file name as an argument. The first
line of text in that file will be used as your password.

The \c{-pw} option takes the password itself as an argument. This is
\s{NOT SECURE} if anybody else uses the same computer, because the
whole command line (including the password) is likely to show up if
another user lists the running processes. \c{-pw} is retained for
backwards compatibility only; you should use \c{-pwfile} instead.

Note that these options only work when you are using the SSH protocol.
Due to fundamental limitations of Telnet, Rlogin, and SUPDUP, these
protocols do not support automated password authentication.

\S2{using-cmdline-agentauth} \i\c{-agent} and \i\c{-noagent}:
control use of Pageant for authentication

The \c{-agent} option turns on SSH authentication using Pageant, and
\c{-noagent} turns it off. These options are only meaningful if you
are using SSH.

See \k{pageant} for general information on \i{Pageant}.

These options are equivalent to the agent authentication checkbox in
the Auth panel of the PuTTY configuration box (see
\k{config-ssh-tryagent}).

\S2{using-cmdline-agent} \I{-A-upper}\c{-A} and \i\c{-a}: control \i{agent
forwarding}

The \c{-A} option turns on SSH agent forwarding, and \c{-a} turns it
off. These options are only meaningful if you are using SSH.

See \k{pageant} for general information on \i{Pageant}, and
\k{pageant-forward} for information on agent forwarding. Note that
there is a security risk involved with enabling this option; see
\k{pageant-security} for details.

These options are equivalent to the agent forwarding checkbox in the
Auth panel of the PuTTY configuration box (see \k{config-ssh-agentfwd}).

These options are not available in the file transfer tools PSCP and
PSFTP.

\S2{using-cmdline-x11} \I{-X-upper}\c{-X} and \i\c{-x}: control \i{X11
forwarding}

The \c{-X} option turns on X11 forwarding in SSH, and \c{-x} turns
it off. These options are only meaningful if you are using SSH.

For information on X11 forwarding, see \k{using-x-forwarding}.

These options are equivalent to the X11 forwarding checkbox in the
X11 panel of the PuTTY configuration box (see \k{config-ssh-x11}).

These options are not available in the file transfer tools PSCP and
PSFTP.

\S2{using-cmdline-pty} \i\c{-t} and \I{-T-upper}\c{-T}: control
\i{pseudo-terminal allocation}

The \c{-t} option ensures PuTTY attempts to allocate a
pseudo-terminal at the server, and \c{-T} stops it from allocating
one. These options are only meaningful if you are using SSH.

These options are equivalent to the \q{Don't allocate a
pseudo-terminal} checkbox in the SSH panel of the PuTTY
configuration box (see \k{config-ssh-pty}).

These options are not available in the file transfer tools PSCP and
PSFTP.

\S2{using-cmdline-noshell} \I{-N-upper}\c{-N}: suppress starting a
\I{suppressing remote shell}shell or command

The \c{-N} option prevents PuTTY from attempting to start a shell or
command on the remote server. You might want to use this option if
you are only using the SSH connection for port forwarding, and your
user account on the server does not have the ability to run a shell.

This feature is only available in SSH protocol version 2 (since the
version 1 protocol assumes you will always want to run a shell).

This option is equivalent to the \q{Don't start a shell or command
at all} checkbox in the SSH panel of the PuTTY configuration box
(see \k{config-ssh-noshell}).

This option is not available in the file transfer tools PSCP and
PSFTP.

\S2{using-cmdline-ncmode} \I{-nc}\c{-nc}: make a \i{remote network
connection} in place of a remote shell or command

The \c{-nc} option prevents Plink (or PuTTY) from attempting to
start a shell or command on the remote server. Instead, it will
instruct the remote server to open a network connection to a host
name and port number specified by you, and treat that network
connection as if it were the main session.

You specify a host and port as an argument to the \c{-nc} option,
with a colon separating the host name from the port number, like
this:

\c plink host1.example.com -nc host2.example.com:1234

This can be useful if you're trying to make a connection to a target
host which you can only reach by SSH forwarding through a proxy host.
One way to do this would be to have an existing SSH connection to the
proxy host, with a port forwarding, but if you prefer to have the
connection started on demand as needed, then this approach can also
work.

However, this does depend on the program \e{using} the proxy being
able to run a subprocess in place of making a network connection.
PuTTY itself can do this using the \q{Local} proxy type, but there's a
built-in more flexible way using the \q{SSH} proxy type. (See
\k{config-proxy-type} for a description of both.) So this feature is
probably most useful with another client program as the end user.

This feature is only available in SSH protocol version 2 (since the
version 1 protocol assumes you will always want to run a shell). It
is not available in the file transfer tools PSCP and PSFTP. It is
available in PuTTY itself, although it is unlikely to be very useful
in any tool other than Plink. Also, \c{-nc} uses the same server
functionality as port forwarding, so it will not work if your server
administrator has disabled port forwarding.

(The option is named \c{-nc} after the Unix program
\W{http://www.vulnwatch.org/netcat/}\c{nc}, short for \q{netcat}.
The command \cq{plink host1 -nc host2:port} is very similar in
functionality to \cq{plink host1 nc host2 port}, which invokes
\c{nc} on the server and tells it to connect to the specified
destination. However, Plink's built-in \c{-nc} option does not
depend on the \c{nc} program being installed on the server.)

\S2{using-cmdline-compress} \I{-C-upper}\c{-C}: enable \i{compression}

The \c{-C} option enables compression of the data sent across the
network. This option is only meaningful if you are using SSH.

This option is equivalent to the \q{Enable compression} checkbox in
the SSH panel of the PuTTY configuration box (see
\k{config-ssh-comp}).

\S2{using-cmdline-sshprot} \i\c{-1} and \i\c{-2}: specify an \i{SSH
protocol version}

The \c{-1} and \c{-2} options force PuTTY to use version \I{SSH-1}1
or version \I{SSH-2}2 of the SSH protocol. These options are only
meaningful if you are using SSH.

These options are equivalent to selecting the SSH protocol version in
the SSH panel of the PuTTY configuration box (see \k{config-ssh-prot}).

\S2{using-cmdline-ipversion} \i\c{-4} and \i\c{-6}: specify an
\i{Internet protocol version}

The \c{-4} and \c{-6} options force PuTTY to use the older Internet
protocol \i{IPv4} or the newer \i{IPv6} for most outgoing
connections.

These options are equivalent to selecting your preferred Internet
protocol version as \q{IPv4} or \q{IPv6} in the Connection panel of
the PuTTY configuration box (see \k{config-address-family}).

\S2{using-cmdline-identity} \i\c{-i}: specify an SSH \i{private key}

The \c{-i} option allows you to specify the name of a private key
file in \c{*.\i{PPK}} format which PuTTY will use to authenticate with the
server. This option is only meaningful if you are using SSH.

If you are using Pageant, you can also specify a \e{public} key file
(in RFC 4716 or OpenSSH format) to identify a specific key file to use.
(This won't work if you're not running Pageant, of course.)

For general information on \i{public-key authentication}, see
\k{pubkey}.

This option is equivalent to the \q{Private key file for
authentication} box in the Auth panel of the PuTTY configuration box
(see \k{config-ssh-privkey}).

\S2{using-cmdline-cert} \i\c{-cert}: specify an SSH \i{certificate}

The \c{-cert} option allows you to specify the name of a certificate
file containing a signed version of your public key. If you specify
this option, PuTTY will present that certificate in place of the plain
public key, whenever it tries to authenticate with a key that matches.
(This applies whether the key is stored in Pageant or loaded directly
from a file by PuTTY.)

This option is equivalent to the \q{Certificate to use with the
private key} box in the Auth panel of the PuTTY configuration box (see
\k{config-ssh-cert}).

\S2{using-cmdline-no-trivial-auth} \i\c{-no-trivial-auth}: disconnect
if SSH authentication succeeds trivially

This option causes PuTTY to abandon an SSH session if the server
accepts authentication without ever having asked for any kind of
password or signature or token.

See \k{config-ssh-notrivialauth} for why you might want this.

\S2{using-cmdline-loghost} \i\c{-loghost}: specify a \i{logical host
name}

This option overrides PuTTY's normal SSH \I{host key cache}host key
caching policy by telling it the name of the host you expect your
connection to end up at (in cases where this differs from the location
PuTTY thinks it's connecting to). It can be a plain host name, or a
host name followed by a colon and a port number. See
\k{config-loghost} for more detail on this.

\S2{using-cmdline-hostkey} \i\c{-hostkey}: \I{manually configuring
host keys}manually specify an expected host key

This option overrides PuTTY's normal SSH \I{host key cache}host key
caching policy by telling it exactly what host key to expect, which
can be useful if the normal automatic host key store in the Registry
is unavailable. The argument to this option should be either a host key
fingerprint, or an SSH-2 public key blob. See
\k{config-ssh-kex-manual-hostkeys} for more information.

You can specify this option more than once if you want to configure
more than one key to be accepted.

\S2{using-cmdline-pgpfp} \i\c{-pgpfp}: display \i{PGP key fingerprint}s

This option causes the PuTTY tools not to run as normal, but instead
to display the fingerprints of the PuTTY PGP Master Keys, in order to
aid with \i{verifying new versions}. See \k{pgpkeys} for more information.

\S2{using-cmdline-sercfg} \i\c{-sercfg}: specify serial port
\i{configuration}

This option specifies the configuration parameters for the serial
port (baud rate, stop bits etc). Its argument is interpreted as a
comma-separated list of configuration options, which can be as
follows:

\b Any single digit from 5 to 9 sets the number of data bits.

\b \cq{1}, \cq{1.5} or \cq{2} sets the number of stop bits.

\b Any other numeric string is interpreted as a baud rate.

\b A single lower-case letter specifies the parity: \cq{n} for none,
\cq{o} for odd, \cq{e} for even, \cq{m} for mark and \cq{s} for space.

\b A single upper-case letter specifies the flow control: \cq{N} for
none, \cq{X} for XON/XOFF, \cq{R} for RTS/CTS and \cq{D} for
DSR/DTR.

For example, \cq{-sercfg 19200,8,n,1,N} denotes a baud rate of
19200, 8 data bits, no parity, 1 stop bit and no flow control.

\S2{using-cmdline-sshlog} \i\c{-sessionlog}, \i\c{-sshlog},
\i\c{-sshrawlog}: enable session logging

These options cause the PuTTY network tools to write out a \i{log
file}. Each of them expects a file name as an argument, e.g.
\cq{-sshlog putty.log} causes an SSH packet log to be written to a
file called \cq{putty.log}. The three different options select
different logging modes, all available from the GUI too:

\b \c{-sessionlog} selects \q{All session output} logging mode.

\b \c{-sshlog} selects \q{SSH packets} logging mode.

\b \c{-sshrawlog} selects \q{SSH packets and raw data} logging mode.

For more information on logging configuration, see \k{config-logging}.

\S2{using-cmdline-logfileexists} \i\c{-logoverwrite}, \i\c{-logappend}:
control behaviour with existing log file

If logging has been enabled (in the saved configuration, or by another
command-line option), and the specified log file already exists, these
options tell the PuTTY network tools what to do so that they don't
have to ask the user. See \k{config-logfileexists} for details.

\S2{using-cmdline-proxycmd} \i\c{-proxycmd}: specify a local proxy
command

This option enables PuTTY's mode for running a \I{Local proxy}command
on the local machine and using it as a proxy for the network
connection. It expects a shell command string as an argument.

See \k{config-proxy-type} for more information on this, and on other
proxy settings. In particular, note that since the special sequences
described there are understood in the argument string, literal
backslashes must be doubled (if you want \c{\\} in your command, you
must put \c{\\\\} on the command line).

\S2{using-cmdline-restrict-acl} \i\c{-restrict-acl}: restrict the
\i{Windows process ACL}

This option (on Windows only) causes PuTTY (or another PuTTY tool) to
try to lock down the operating system's access control on its own
process. If this succeeds, it should present an extra obstacle to
malware that has managed to run under the same user id as the PuTTY
process, by preventing it from attaching to PuTTY using the same
interfaces debuggers use and either reading sensitive information out
of its memory or hijacking its network session.

This option is not enabled by default, because this form of
interaction between Windows programs has many legitimate uses,
including accessibility software such as screen readers. Also, it
cannot provide full security against this class of attack in any case,
because PuTTY can only lock down its own ACL \e{after} it has started
up, and malware could still get in if it attacks the process between
startup and lockdown. So it trades away noticeable convenience, and
delivers less real security than you might want. However, if you do
want to make that tradeoff anyway, the option is available.

A PuTTY process started with \c{-restrict-acl} will pass that on to
any processes started with Duplicate Session, New Session etc.
(However, if you're invoking PuTTY tools explicitly, for instance as a
proxy command, you'll need to arrange to pass them the
\c{-restrict-acl} option yourself, if that's what you want.)

If Pageant is started with the \c{-restrict-acl} option, and you use
it to launch a PuTTY session from its \ii{System Tray} submenu, then
Pageant will \e{not} default to starting the PuTTY subprocess with a
restricted ACL. This is because PuTTY is more likely to suffer reduced
functionality as a result of restricted ACLs (e.g. screen reader
software will have a greater need to interact with it), whereas
Pageant stores the more critical information (hence benefits more from
the extra protection), so it's reasonable to want to run Pageant but
not PuTTY with the ACL restrictions. You can force Pageant to start
subsidiary PuTTY processes with a restricted ACL if you also pass the
\i\c{-restrict-putty-acl} option.

\S2{using-cmdline-host-ca} \i{\c{-host-ca}}: launch the
\I{certificate}host CA configuration

If you start PuTTY with the \c{-host-ca} option, it will not launch a
session at all. Instead, it will just display the configuration dialog
box for host certification authorities, as described in
\k{config-ssh-kex-cert}. When you dismiss that dialog box, PuTTY will
terminate.

\S2{using-cmdline-legacy-stdio-prompts} \i{\c{-legacy-stdio-prompts}}:
handle Windows console prompts like older versions of PuTTY

This option applies to all of PSCP, PSFTP and Plink on Windows: all
the tools in the PuTTY suite that run in a Windows console and make
SSH connections.

These tools use the Windows console to prompt for various information:
usernames, passwords, answers to questions about host keys, and so on.

In current versions of PuTTY, these prompts work by direct access to
the Windows console. This means that even if you redirect the standard
input or output of the tool, prompts will \e{still} be sent to the
console (and not where you've redirected your output), and the user's
responses will be read from the console (and not from where you've
redirected your input).

Another advantage of reading directly from the Windows console is that
the tools can read input as \i{Unicode}. So this also allows you to
enter usernames and passwords that contain characters not in the
Windows system's default character set.

In versions of the PuTTY tools up to and including 0.81, the prompts
used the tool's ordinary I/O handles, so prompt output and user
responses could be redirected.

We think the new behaviour is more likely to be useful. For example,
if you have a local command that generates output, and you want to
pipe that output into a command running remotely via Plink, you can
run a command line such as

\c local_command | plink hostname remote_command

and the data piped into the remote command will be the same whether or
not Plink has to stop to ask for a password. With the old behaviour
you would have had to include the password in Plink's input, which is
more awkward.

However, we recognise that people may have customised complicated
workflows around the old behaviour. So if you need to switch back to
it, you can do so by specifying \c{-legacy-stdio-prompts} on the
command-line.

To fully revert to the previous behaviour, you'd also need to specify
\c{-legacy-charset-handling} (see the next section). (Even without
that option, prompt handling with \c{-legacy-stdio-prompts} may not be
fully Unicode-clean.)

\S2{using-cmdline-legacy-charset-handling} \i{\c{-legacy-charset-handling}}:
handle character set in prompts like older versions of PuTTY

This option applies to PuTTY (on all platforms), and also to all of
PSCP, PSFTP and Plink on Windows.

In current versions of PuTTY, when you are prompted in the terminal
window for things like SSH usernames and passwords, the responses you
type are interpreted as \i{Unicode}, and transmitted to the server as
such, even if the terminal is otherwise configured to use a different
character encoding (see \k{config-charset}). Similarly, the same
prompts from the Windows console tools will unconditionally interpret
their input as Unicode.

This behaviour is in line with the SSH standards; it allows things
like usernames to use the full character set of the user's native
language, and ensures that different keystrokes you type for your
password are actually treated distinctly.

However, if you are used to the behaviour of the PuTTY tools up to
version 0.81, this could cause a previously working username and/or
password not to work as you expected. For instance, if you had set a
password including some \i{accented characters}, this change in
behaviour could cause the same keystrokes you've always entered to
start sending a different sequence of bytes to the server, denying you
access (and you wouldn't even be able to see the difference, since the
password is not shown when you type it).

\c{-legacy-charset-handling} reverts the PuTTY tools' behaviour to how
it was previously: what you type at these prompts will be interpreted
according to the \q{Remote character set} (for PuTTY) or Windows'
default character set (for the Windows console tools).

(For example, this could allow you to log in to change your password
to make using this option unnecessary in future. But if you're doing
that, make sure the terminal is configured as UTF-8!)
